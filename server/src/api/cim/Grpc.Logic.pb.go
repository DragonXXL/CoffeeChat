// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Grpc.Logic.proto

package cim

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("Grpc.Logic.proto", fileDescriptor_3e29f99bd654035c) }

var fileDescriptor_3e29f99bd654035c = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4f, 0xc2, 0x30,
	0x14, 0xc6, 0x97, 0x20, 0x8a, 0x35, 0x01, 0x69, 0x4c, 0x4c, 0x76, 0xf0, 0xb0, 0x78, 0xee, 0x41,
	0x6f, 0xde, 0xc6, 0x40, 0x58, 0xc2, 0x88, 0x82, 0x78, 0xf0, 0x56, 0xcb, 0x63, 0x36, 0x83, 0x76,
	0xae, 0xe5, 0xc0, 0xbf, 0xe3, 0x5f, 0x6a, 0x5a, 0x3a, 0x86, 0x01, 0xd4, 0xdb, 0xfa, 0xfd, 0xbe,
	0x7e, 0xef, 0xf5, 0xbd, 0xa1, 0xcb, 0x7e, 0x91, 0x33, 0x32, 0x94, 0x29, 0x67, 0x24, 0x2f, 0xa4,
	0x96, 0xb8, 0x11, 0xc5, 0x09, 0x31, 0xaa, 0xdf, 0x34, 0x5f, 0x43, 0xae, 0xf4, 0x86, 0xf8, 0x2d,
	0x7b, 0x96, 0x29, 0x17, 0x4e, 0x68, 0x1b, 0x21, 0x01, 0xa5, 0x68, 0x0a, 0x4e, 0x6a, 0xda, 0xbc,
	0x2e, 0xcc, 0x37, 0xe7, 0xbb, 0xaf, 0x3a, 0xaa, 0xdb, 0x74, 0x4c, 0x50, 0x63, 0x42, 0xd7, 0x03,
	0x58, 0x2c, 0x24, 0x6e, 0x91, 0xb2, 0x08, 0xb1, 0x82, 0xbf, 0x23, 0xf4, 0x96, 0xb9, 0x5e, 0x07,
	0x1e, 0x7e, 0x40, 0x27, 0x4f, 0x5c, 0xa4, 0xf8, 0x9a, 0x54, 0x65, 0xa3, 0x38, 0x19, 0x00, 0x2d,
	0x74, 0x07, 0xa8, 0xf6, 0x8f, 0x81, 0xc0, 0xc3, 0x3d, 0x74, 0x1e, 0xae, 0xf4, 0xc7, 0x8b, 0xcc,
	0x40, 0x60, 0xff, 0xa7, 0x6f, 0x0b, 0xc6, 0xf0, 0xe9, 0x1f, 0x65, 0x2a, 0x0f, 0x3c, 0x3c, 0x43,
	0x57, 0x63, 0x60, 0x20, 0x74, 0x24, 0x85, 0xa6, 0x4c, 0x4f, 0x40, 0x29, 0x2e, 0x05, 0xbe, 0x25,
	0xdb, 0xc9, 0x44, 0x71, 0x72, 0xc8, 0x62, 0xb2, 0xff, 0xe1, 0xb2, 0x55, 0x1e, 0x11, 0xea, 0x83,
	0x4e, 0x54, 0x6a, 0xac, 0x65, 0xb7, 0xee, 0x56, 0x05, 0x76, 0xba, 0xdd, 0x67, 0x36, 0xa7, 0x8b,
	0x2e, 0x26, 0x20, 0x66, 0x89, 0x4a, 0xbb, 0x54, 0x53, 0x37, 0xb7, 0x72, 0x3b, 0x51, 0x9c, 0x38,
	0xe0, 0x52, 0xf6, 0x41, 0xc8, 0xb2, 0xc0, 0xc3, 0x11, 0x6a, 0x8e, 0x81, 0xce, 0x42, 0x96, 0x95,
	0x41, 0x37, 0x47, 0xfc, 0xce, 0x76, 0x68, 0x77, 0xaf, 0x08, 0x45, 0x05, 0x50, 0x0d, 0x53, 0x05,
	0x05, 0x0e, 0x2a, 0x43, 0xa5, 0x86, 0x8c, 0xc9, 0x95, 0xd0, 0xb1, 0x98, 0x4b, 0xf3, 0xb4, 0x3f,
	0x3d, 0xf6, 0x89, 0x53, 0xd4, 0x7e, 0x5e, 0x41, 0xb1, 0x36, 0x70, 0xc4, 0x59, 0x36, 0xa2, 0x4b,
	0x70, 0xfd, 0xd9, 0xab, 0x7b, 0xd0, 0x44, 0xff, 0xca, 0x4d, 0x6c, 0xe7, 0x6c, 0x50, 0x7b, 0xab,
	0x31, 0xbe, 0x7c, 0x3f, 0xb5, 0x3f, 0xed, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x35,
	0x2f, 0x76, 0x16, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogicClient is the client API for Logic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogicClient interface {
	// 传递我方信息，双向GRPC
	SayHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Empty, error)
	// ping
	Ping(ctx context.Context, in *CIMHeartBeat, opts ...grpc.CallOption) (*CIMHeartBeat, error)
	// 验证token
	AuthToken(ctx context.Context, in *CIMAuthTokenReq, opts ...grpc.CallOption) (*CIMAuthTokenRsp, error)
	// 查询会话列表
	RecentContactSession(ctx context.Context, in *CIMRecentContactSessionReq, opts ...grpc.CallOption) (*CIMRecentContactSessionRsp, error)
	// 查询历史消息列表
	GetMsgList(ctx context.Context, in *CIMGetMsgListReq, opts ...grpc.CallOption) (*CIMGetMsgListRsp, error)
	// 发消息
	SendMsgData(ctx context.Context, in *CIMMsgData, opts ...grpc.CallOption) (*CIMMsgDataAck, error)
	// 已读消息回执
	ReadAckMsgData(ctx context.Context, in *CIMMsgDataReadAck, opts ...grpc.CallOption) (*Empty, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserAccountInfoReq, opts ...grpc.CallOption) (*CreateUserAccountInfoRsp, error)
	// 查询用户昵称
	QueryUserNickName(ctx context.Context, in *QueryUserNickNameReq, opts ...grpc.CallOption) (*QueryUserNickNameRsp, error)
}

type logicClient struct {
	cc *grpc.ClientConn
}

func NewLogicClient(cc *grpc.ClientConn) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) SayHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Ping(ctx context.Context, in *CIMHeartBeat, opts ...grpc.CallOption) (*CIMHeartBeat, error) {
	out := new(CIMHeartBeat)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) AuthToken(ctx context.Context, in *CIMAuthTokenReq, opts ...grpc.CallOption) (*CIMAuthTokenRsp, error) {
	out := new(CIMAuthTokenRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/AuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) RecentContactSession(ctx context.Context, in *CIMRecentContactSessionReq, opts ...grpc.CallOption) (*CIMRecentContactSessionRsp, error) {
	out := new(CIMRecentContactSessionRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/RecentContactSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GetMsgList(ctx context.Context, in *CIMGetMsgListReq, opts ...grpc.CallOption) (*CIMGetMsgListRsp, error) {
	out := new(CIMGetMsgListRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/GetMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) SendMsgData(ctx context.Context, in *CIMMsgData, opts ...grpc.CallOption) (*CIMMsgDataAck, error) {
	out := new(CIMMsgDataAck)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/SendMsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) ReadAckMsgData(ctx context.Context, in *CIMMsgDataReadAck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/ReadAckMsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) CreateUser(ctx context.Context, in *CreateUserAccountInfoReq, opts ...grpc.CallOption) (*CreateUserAccountInfoRsp, error) {
	out := new(CreateUserAccountInfoRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) QueryUserNickName(ctx context.Context, in *QueryUserNickNameReq, opts ...grpc.CallOption) (*QueryUserNickNameRsp, error) {
	out := new(QueryUserNickNameRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/QueryUserNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServer is the server API for Logic service.
type LogicServer interface {
	// 传递我方信息，双向GRPC
	SayHello(context.Context, *Hello) (*Empty, error)
	// ping
	Ping(context.Context, *CIMHeartBeat) (*CIMHeartBeat, error)
	// 验证token
	AuthToken(context.Context, *CIMAuthTokenReq) (*CIMAuthTokenRsp, error)
	// 查询会话列表
	RecentContactSession(context.Context, *CIMRecentContactSessionReq) (*CIMRecentContactSessionRsp, error)
	// 查询历史消息列表
	GetMsgList(context.Context, *CIMGetMsgListReq) (*CIMGetMsgListRsp, error)
	// 发消息
	SendMsgData(context.Context, *CIMMsgData) (*CIMMsgDataAck, error)
	// 已读消息回执
	ReadAckMsgData(context.Context, *CIMMsgDataReadAck) (*Empty, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserAccountInfoReq) (*CreateUserAccountInfoRsp, error)
	// 查询用户昵称
	QueryUserNickName(context.Context, *QueryUserNickNameReq) (*QueryUserNickNameRsp, error)
}

// UnimplementedLogicServer can be embedded to have forward compatible implementations.
type UnimplementedLogicServer struct {
}

func (*UnimplementedLogicServer) SayHello(ctx context.Context, req *Hello) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedLogicServer) Ping(ctx context.Context, req *CIMHeartBeat) (*CIMHeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLogicServer) AuthToken(ctx context.Context, req *CIMAuthTokenReq) (*CIMAuthTokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToken not implemented")
}
func (*UnimplementedLogicServer) RecentContactSession(ctx context.Context, req *CIMRecentContactSessionReq) (*CIMRecentContactSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentContactSession not implemented")
}
func (*UnimplementedLogicServer) GetMsgList(ctx context.Context, req *CIMGetMsgListReq) (*CIMGetMsgListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgList not implemented")
}
func (*UnimplementedLogicServer) SendMsgData(ctx context.Context, req *CIMMsgData) (*CIMMsgDataAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgData not implemented")
}
func (*UnimplementedLogicServer) ReadAckMsgData(ctx context.Context, req *CIMMsgDataReadAck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAckMsgData not implemented")
}
func (*UnimplementedLogicServer) CreateUser(ctx context.Context, req *CreateUserAccountInfoReq) (*CreateUserAccountInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedLogicServer) QueryUserNickName(ctx context.Context, req *QueryUserNickNameReq) (*QueryUserNickNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserNickName not implemented")
}

func RegisterLogicServer(s *grpc.Server, srv LogicServer) {
	s.RegisterService(&_Logic_serviceDesc, srv)
}

func _Logic_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).SayHello(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMHeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Ping(ctx, req.(*CIMHeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/AuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).AuthToken(ctx, req.(*CIMAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_RecentContactSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMRecentContactSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).RecentContactSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/RecentContactSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).RecentContactSession(ctx, req.(*CIMRecentContactSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GetMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGetMsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/GetMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetMsgList(ctx, req.(*CIMGetMsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_SendMsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMMsgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).SendMsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/SendMsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).SendMsgData(ctx, req.(*CIMMsgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_ReadAckMsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMMsgDataReadAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).ReadAckMsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/ReadAckMsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).ReadAckMsgData(ctx, req.(*CIMMsgDataReadAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).CreateUser(ctx, req.(*CreateUserAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_QueryUserNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserNickNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).QueryUserNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/QueryUserNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).QueryUserNickName(ctx, req.(*QueryUserNickNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CIM.Grpc.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Logic_SayHello_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Logic_Ping_Handler,
		},
		{
			MethodName: "AuthToken",
			Handler:    _Logic_AuthToken_Handler,
		},
		{
			MethodName: "RecentContactSession",
			Handler:    _Logic_RecentContactSession_Handler,
		},
		{
			MethodName: "GetMsgList",
			Handler:    _Logic_GetMsgList_Handler,
		},
		{
			MethodName: "SendMsgData",
			Handler:    _Logic_SendMsgData_Handler,
		},
		{
			MethodName: "ReadAckMsgData",
			Handler:    _Logic_ReadAckMsgData_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Logic_CreateUser_Handler,
		},
		{
			MethodName: "QueryUserNickName",
			Handler:    _Logic_QueryUserNickName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Grpc.Logic.proto",
}
