// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CoffeeChat/internal/chat/data/ent/messagerecv"
	"CoffeeChat/internal/chat/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageRecvUpdate is the builder for updating MessageRecv entities.
type MessageRecvUpdate struct {
	config
	hooks    []Hook
	mutation *MessageRecvMutation
}

// Where appends a list predicates to the MessageRecvUpdate builder.
func (mru *MessageRecvUpdate) Where(ps ...predicate.MessageRecv) *MessageRecvUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetMsgID sets the "msg_id" field.
func (mru *MessageRecvUpdate) SetMsgID(i int64) *MessageRecvUpdate {
	mru.mutation.ResetMsgID()
	mru.mutation.SetMsgID(i)
	return mru
}

// AddMsgID adds i to the "msg_id" field.
func (mru *MessageRecvUpdate) AddMsgID(i int64) *MessageRecvUpdate {
	mru.mutation.AddMsgID(i)
	return mru
}

// SetClientMsgID sets the "client_msg_id" field.
func (mru *MessageRecvUpdate) SetClientMsgID(s string) *MessageRecvUpdate {
	mru.mutation.SetClientMsgID(s)
	return mru
}

// SetFromID sets the "from_id" field.
func (mru *MessageRecvUpdate) SetFromID(i int64) *MessageRecvUpdate {
	mru.mutation.ResetFromID()
	mru.mutation.SetFromID(i)
	return mru
}

// AddFromID adds i to the "from_id" field.
func (mru *MessageRecvUpdate) AddFromID(i int64) *MessageRecvUpdate {
	mru.mutation.AddFromID(i)
	return mru
}

// SetToID sets the "to_id" field.
func (mru *MessageRecvUpdate) SetToID(i int64) *MessageRecvUpdate {
	mru.mutation.ResetToID()
	mru.mutation.SetToID(i)
	return mru
}

// AddToID adds i to the "to_id" field.
func (mru *MessageRecvUpdate) AddToID(i int64) *MessageRecvUpdate {
	mru.mutation.AddToID(i)
	return mru
}

// SetGroupID sets the "group_id" field.
func (mru *MessageRecvUpdate) SetGroupID(i int64) *MessageRecvUpdate {
	mru.mutation.ResetGroupID()
	mru.mutation.SetGroupID(i)
	return mru
}

// AddGroupID adds i to the "group_id" field.
func (mru *MessageRecvUpdate) AddGroupID(i int64) *MessageRecvUpdate {
	mru.mutation.AddGroupID(i)
	return mru
}

// SetMsgType sets the "msg_type" field.
func (mru *MessageRecvUpdate) SetMsgType(i int) *MessageRecvUpdate {
	mru.mutation.ResetMsgType()
	mru.mutation.SetMsgType(i)
	return mru
}

// AddMsgType adds i to the "msg_type" field.
func (mru *MessageRecvUpdate) AddMsgType(i int) *MessageRecvUpdate {
	mru.mutation.AddMsgType(i)
	return mru
}

// SetMsgContent sets the "msg_content" field.
func (mru *MessageRecvUpdate) SetMsgContent(s string) *MessageRecvUpdate {
	mru.mutation.SetMsgContent(s)
	return mru
}

// SetMsgResCode sets the "msg_res_code" field.
func (mru *MessageRecvUpdate) SetMsgResCode(i int16) *MessageRecvUpdate {
	mru.mutation.ResetMsgResCode()
	mru.mutation.SetMsgResCode(i)
	return mru
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (mru *MessageRecvUpdate) AddMsgResCode(i int16) *MessageRecvUpdate {
	mru.mutation.AddMsgResCode(i)
	return mru
}

// SetMsgFeature sets the "msg_feature" field.
func (mru *MessageRecvUpdate) SetMsgFeature(i int16) *MessageRecvUpdate {
	mru.mutation.ResetMsgFeature()
	mru.mutation.SetMsgFeature(i)
	return mru
}

// AddMsgFeature adds i to the "msg_feature" field.
func (mru *MessageRecvUpdate) AddMsgFeature(i int16) *MessageRecvUpdate {
	mru.mutation.AddMsgFeature(i)
	return mru
}

// SetMsgStatus sets the "msg_status" field.
func (mru *MessageRecvUpdate) SetMsgStatus(i int16) *MessageRecvUpdate {
	mru.mutation.ResetMsgStatus()
	mru.mutation.SetMsgStatus(i)
	return mru
}

// AddMsgStatus adds i to the "msg_status" field.
func (mru *MessageRecvUpdate) AddMsgStatus(i int16) *MessageRecvUpdate {
	mru.mutation.AddMsgStatus(i)
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *MessageRecvUpdate) SetUpdatedAt(t time.Time) *MessageRecvUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// Mutation returns the MessageRecvMutation object of the builder.
func (mru *MessageRecvUpdate) Mutation() *MessageRecvMutation {
	return mru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MessageRecvUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mru.defaults()
	if len(mru.hooks) == 0 {
		affected, err = mru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageRecvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mru.mutation = mutation
			affected, err = mru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mru.hooks) - 1; i >= 0; i-- {
			if mru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MessageRecvUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MessageRecvUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MessageRecvUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *MessageRecvUpdate) defaults() {
	if _, ok := mru.mutation.UpdatedAt(); !ok {
		v := messagerecv.UpdateDefaultUpdatedAt()
		mru.mutation.SetUpdatedAt(v)
	}
}

func (mru *MessageRecvUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagerecv.Table,
			Columns: messagerecv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagerecv.FieldID,
			},
		},
	}
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.MsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldMsgID,
		})
	}
	if value, ok := mru.mutation.AddedMsgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldMsgID,
		})
	}
	if value, ok := mru.mutation.ClientMsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagerecv.FieldClientMsgID,
		})
	}
	if value, ok := mru.mutation.FromID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldFromID,
		})
	}
	if value, ok := mru.mutation.AddedFromID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldFromID,
		})
	}
	if value, ok := mru.mutation.ToID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldToID,
		})
	}
	if value, ok := mru.mutation.AddedToID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldToID,
		})
	}
	if value, ok := mru.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldGroupID,
		})
	}
	if value, ok := mru.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldGroupID,
		})
	}
	if value, ok := mru.mutation.MsgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagerecv.FieldMsgType,
		})
	}
	if value, ok := mru.mutation.AddedMsgType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagerecv.FieldMsgType,
		})
	}
	if value, ok := mru.mutation.MsgContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagerecv.FieldMsgContent,
		})
	}
	if value, ok := mru.mutation.MsgResCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgResCode,
		})
	}
	if value, ok := mru.mutation.AddedMsgResCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgResCode,
		})
	}
	if value, ok := mru.mutation.MsgFeature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgFeature,
		})
	}
	if value, ok := mru.mutation.AddedMsgFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgFeature,
		})
	}
	if value, ok := mru.mutation.MsgStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgStatus,
		})
	}
	if value, ok := mru.mutation.AddedMsgStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgStatus,
		})
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagerecv.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagerecv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MessageRecvUpdateOne is the builder for updating a single MessageRecv entity.
type MessageRecvUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageRecvMutation
}

// SetMsgID sets the "msg_id" field.
func (mruo *MessageRecvUpdateOne) SetMsgID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.ResetMsgID()
	mruo.mutation.SetMsgID(i)
	return mruo
}

// AddMsgID adds i to the "msg_id" field.
func (mruo *MessageRecvUpdateOne) AddMsgID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.AddMsgID(i)
	return mruo
}

// SetClientMsgID sets the "client_msg_id" field.
func (mruo *MessageRecvUpdateOne) SetClientMsgID(s string) *MessageRecvUpdateOne {
	mruo.mutation.SetClientMsgID(s)
	return mruo
}

// SetFromID sets the "from_id" field.
func (mruo *MessageRecvUpdateOne) SetFromID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.ResetFromID()
	mruo.mutation.SetFromID(i)
	return mruo
}

// AddFromID adds i to the "from_id" field.
func (mruo *MessageRecvUpdateOne) AddFromID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.AddFromID(i)
	return mruo
}

// SetToID sets the "to_id" field.
func (mruo *MessageRecvUpdateOne) SetToID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.ResetToID()
	mruo.mutation.SetToID(i)
	return mruo
}

// AddToID adds i to the "to_id" field.
func (mruo *MessageRecvUpdateOne) AddToID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.AddToID(i)
	return mruo
}

// SetGroupID sets the "group_id" field.
func (mruo *MessageRecvUpdateOne) SetGroupID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.ResetGroupID()
	mruo.mutation.SetGroupID(i)
	return mruo
}

// AddGroupID adds i to the "group_id" field.
func (mruo *MessageRecvUpdateOne) AddGroupID(i int64) *MessageRecvUpdateOne {
	mruo.mutation.AddGroupID(i)
	return mruo
}

// SetMsgType sets the "msg_type" field.
func (mruo *MessageRecvUpdateOne) SetMsgType(i int) *MessageRecvUpdateOne {
	mruo.mutation.ResetMsgType()
	mruo.mutation.SetMsgType(i)
	return mruo
}

// AddMsgType adds i to the "msg_type" field.
func (mruo *MessageRecvUpdateOne) AddMsgType(i int) *MessageRecvUpdateOne {
	mruo.mutation.AddMsgType(i)
	return mruo
}

// SetMsgContent sets the "msg_content" field.
func (mruo *MessageRecvUpdateOne) SetMsgContent(s string) *MessageRecvUpdateOne {
	mruo.mutation.SetMsgContent(s)
	return mruo
}

// SetMsgResCode sets the "msg_res_code" field.
func (mruo *MessageRecvUpdateOne) SetMsgResCode(i int16) *MessageRecvUpdateOne {
	mruo.mutation.ResetMsgResCode()
	mruo.mutation.SetMsgResCode(i)
	return mruo
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (mruo *MessageRecvUpdateOne) AddMsgResCode(i int16) *MessageRecvUpdateOne {
	mruo.mutation.AddMsgResCode(i)
	return mruo
}

// SetMsgFeature sets the "msg_feature" field.
func (mruo *MessageRecvUpdateOne) SetMsgFeature(i int16) *MessageRecvUpdateOne {
	mruo.mutation.ResetMsgFeature()
	mruo.mutation.SetMsgFeature(i)
	return mruo
}

// AddMsgFeature adds i to the "msg_feature" field.
func (mruo *MessageRecvUpdateOne) AddMsgFeature(i int16) *MessageRecvUpdateOne {
	mruo.mutation.AddMsgFeature(i)
	return mruo
}

// SetMsgStatus sets the "msg_status" field.
func (mruo *MessageRecvUpdateOne) SetMsgStatus(i int16) *MessageRecvUpdateOne {
	mruo.mutation.ResetMsgStatus()
	mruo.mutation.SetMsgStatus(i)
	return mruo
}

// AddMsgStatus adds i to the "msg_status" field.
func (mruo *MessageRecvUpdateOne) AddMsgStatus(i int16) *MessageRecvUpdateOne {
	mruo.mutation.AddMsgStatus(i)
	return mruo
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *MessageRecvUpdateOne) SetUpdatedAt(t time.Time) *MessageRecvUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// Mutation returns the MessageRecvMutation object of the builder.
func (mruo *MessageRecvUpdateOne) Mutation() *MessageRecvMutation {
	return mruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MessageRecvUpdateOne) Select(field string, fields ...string) *MessageRecvUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MessageRecv entity.
func (mruo *MessageRecvUpdateOne) Save(ctx context.Context) (*MessageRecv, error) {
	var (
		err  error
		node *MessageRecv
	)
	mruo.defaults()
	if len(mruo.hooks) == 0 {
		node, err = mruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageRecvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mruo.mutation = mutation
			node, err = mruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mruo.hooks) - 1; i >= 0; i-- {
			if mruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MessageRecv)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageRecvMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MessageRecvUpdateOne) SaveX(ctx context.Context) *MessageRecv {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MessageRecvUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MessageRecvUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *MessageRecvUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdatedAt(); !ok {
		v := messagerecv.UpdateDefaultUpdatedAt()
		mruo.mutation.SetUpdatedAt(v)
	}
}

func (mruo *MessageRecvUpdateOne) sqlSave(ctx context.Context) (_node *MessageRecv, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagerecv.Table,
			Columns: messagerecv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagerecv.FieldID,
			},
		},
	}
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageRecv.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagerecv.FieldID)
		for _, f := range fields {
			if !messagerecv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagerecv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.MsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldMsgID,
		})
	}
	if value, ok := mruo.mutation.AddedMsgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldMsgID,
		})
	}
	if value, ok := mruo.mutation.ClientMsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagerecv.FieldClientMsgID,
		})
	}
	if value, ok := mruo.mutation.FromID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldFromID,
		})
	}
	if value, ok := mruo.mutation.AddedFromID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldFromID,
		})
	}
	if value, ok := mruo.mutation.ToID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldToID,
		})
	}
	if value, ok := mruo.mutation.AddedToID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldToID,
		})
	}
	if value, ok := mruo.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldGroupID,
		})
	}
	if value, ok := mruo.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagerecv.FieldGroupID,
		})
	}
	if value, ok := mruo.mutation.MsgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagerecv.FieldMsgType,
		})
	}
	if value, ok := mruo.mutation.AddedMsgType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagerecv.FieldMsgType,
		})
	}
	if value, ok := mruo.mutation.MsgContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagerecv.FieldMsgContent,
		})
	}
	if value, ok := mruo.mutation.MsgResCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgResCode,
		})
	}
	if value, ok := mruo.mutation.AddedMsgResCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgResCode,
		})
	}
	if value, ok := mruo.mutation.MsgFeature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgFeature,
		})
	}
	if value, ok := mruo.mutation.AddedMsgFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgFeature,
		})
	}
	if value, ok := mruo.mutation.MsgStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgStatus,
		})
	}
	if value, ok := mruo.mutation.AddedMsgStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagerecv.FieldMsgStatus,
		})
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagerecv.FieldUpdatedAt,
		})
	}
	_node = &MessageRecv{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagerecv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
