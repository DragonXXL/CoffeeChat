// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CoffeeChat/internal/chat/data/ent/messagesend"
	"CoffeeChat/internal/chat/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageSendUpdate is the builder for updating MessageSend entities.
type MessageSendUpdate struct {
	config
	hooks    []Hook
	mutation *MessageSendMutation
}

// Where appends a list predicates to the MessageSendUpdate builder.
func (msu *MessageSendUpdate) Where(ps ...predicate.MessageSend) *MessageSendUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetMsgID sets the "msg_id" field.
func (msu *MessageSendUpdate) SetMsgID(i int64) *MessageSendUpdate {
	msu.mutation.ResetMsgID()
	msu.mutation.SetMsgID(i)
	return msu
}

// AddMsgID adds i to the "msg_id" field.
func (msu *MessageSendUpdate) AddMsgID(i int64) *MessageSendUpdate {
	msu.mutation.AddMsgID(i)
	return msu
}

// SetClientMsgID sets the "client_msg_id" field.
func (msu *MessageSendUpdate) SetClientMsgID(s string) *MessageSendUpdate {
	msu.mutation.SetClientMsgID(s)
	return msu
}

// SetFromID sets the "from_id" field.
func (msu *MessageSendUpdate) SetFromID(i int64) *MessageSendUpdate {
	msu.mutation.ResetFromID()
	msu.mutation.SetFromID(i)
	return msu
}

// AddFromID adds i to the "from_id" field.
func (msu *MessageSendUpdate) AddFromID(i int64) *MessageSendUpdate {
	msu.mutation.AddFromID(i)
	return msu
}

// SetToID sets the "to_id" field.
func (msu *MessageSendUpdate) SetToID(i int64) *MessageSendUpdate {
	msu.mutation.ResetToID()
	msu.mutation.SetToID(i)
	return msu
}

// AddToID adds i to the "to_id" field.
func (msu *MessageSendUpdate) AddToID(i int64) *MessageSendUpdate {
	msu.mutation.AddToID(i)
	return msu
}

// SetGroupID sets the "group_id" field.
func (msu *MessageSendUpdate) SetGroupID(i int64) *MessageSendUpdate {
	msu.mutation.ResetGroupID()
	msu.mutation.SetGroupID(i)
	return msu
}

// AddGroupID adds i to the "group_id" field.
func (msu *MessageSendUpdate) AddGroupID(i int64) *MessageSendUpdate {
	msu.mutation.AddGroupID(i)
	return msu
}

// SetMsgType sets the "msg_type" field.
func (msu *MessageSendUpdate) SetMsgType(i int) *MessageSendUpdate {
	msu.mutation.ResetMsgType()
	msu.mutation.SetMsgType(i)
	return msu
}

// AddMsgType adds i to the "msg_type" field.
func (msu *MessageSendUpdate) AddMsgType(i int) *MessageSendUpdate {
	msu.mutation.AddMsgType(i)
	return msu
}

// SetMsgContent sets the "msg_content" field.
func (msu *MessageSendUpdate) SetMsgContent(s string) *MessageSendUpdate {
	msu.mutation.SetMsgContent(s)
	return msu
}

// SetMsgResCode sets the "msg_res_code" field.
func (msu *MessageSendUpdate) SetMsgResCode(i int16) *MessageSendUpdate {
	msu.mutation.ResetMsgResCode()
	msu.mutation.SetMsgResCode(i)
	return msu
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (msu *MessageSendUpdate) AddMsgResCode(i int16) *MessageSendUpdate {
	msu.mutation.AddMsgResCode(i)
	return msu
}

// SetMsgFeature sets the "msg_feature" field.
func (msu *MessageSendUpdate) SetMsgFeature(i int16) *MessageSendUpdate {
	msu.mutation.ResetMsgFeature()
	msu.mutation.SetMsgFeature(i)
	return msu
}

// AddMsgFeature adds i to the "msg_feature" field.
func (msu *MessageSendUpdate) AddMsgFeature(i int16) *MessageSendUpdate {
	msu.mutation.AddMsgFeature(i)
	return msu
}

// SetMsgStatus sets the "msg_status" field.
func (msu *MessageSendUpdate) SetMsgStatus(i int16) *MessageSendUpdate {
	msu.mutation.ResetMsgStatus()
	msu.mutation.SetMsgStatus(i)
	return msu
}

// AddMsgStatus adds i to the "msg_status" field.
func (msu *MessageSendUpdate) AddMsgStatus(i int16) *MessageSendUpdate {
	msu.mutation.AddMsgStatus(i)
	return msu
}

// SetUpdatedAt sets the "updated_at" field.
func (msu *MessageSendUpdate) SetUpdatedAt(t time.Time) *MessageSendUpdate {
	msu.mutation.SetUpdatedAt(t)
	return msu
}

// Mutation returns the MessageSendMutation object of the builder.
func (msu *MessageSendUpdate) Mutation() *MessageSendMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MessageSendUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	msu.defaults()
	if len(msu.hooks) == 0 {
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageSendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			if msu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MessageSendUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MessageSendUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MessageSendUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msu *MessageSendUpdate) defaults() {
	if _, ok := msu.mutation.UpdatedAt(); !ok {
		v := messagesend.UpdateDefaultUpdatedAt()
		msu.mutation.SetUpdatedAt(v)
	}
}

func (msu *MessageSendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagesend.Table,
			Columns: messagesend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagesend.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.MsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldMsgID,
		})
	}
	if value, ok := msu.mutation.AddedMsgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldMsgID,
		})
	}
	if value, ok := msu.mutation.ClientMsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagesend.FieldClientMsgID,
		})
	}
	if value, ok := msu.mutation.FromID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldFromID,
		})
	}
	if value, ok := msu.mutation.AddedFromID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldFromID,
		})
	}
	if value, ok := msu.mutation.ToID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldToID,
		})
	}
	if value, ok := msu.mutation.AddedToID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldToID,
		})
	}
	if value, ok := msu.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldGroupID,
		})
	}
	if value, ok := msu.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldGroupID,
		})
	}
	if value, ok := msu.mutation.MsgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagesend.FieldMsgType,
		})
	}
	if value, ok := msu.mutation.AddedMsgType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagesend.FieldMsgType,
		})
	}
	if value, ok := msu.mutation.MsgContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagesend.FieldMsgContent,
		})
	}
	if value, ok := msu.mutation.MsgResCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgResCode,
		})
	}
	if value, ok := msu.mutation.AddedMsgResCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgResCode,
		})
	}
	if value, ok := msu.mutation.MsgFeature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgFeature,
		})
	}
	if value, ok := msu.mutation.AddedMsgFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgFeature,
		})
	}
	if value, ok := msu.mutation.MsgStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgStatus,
		})
	}
	if value, ok := msu.mutation.AddedMsgStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgStatus,
		})
	}
	if value, ok := msu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagesend.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagesend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MessageSendUpdateOne is the builder for updating a single MessageSend entity.
type MessageSendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageSendMutation
}

// SetMsgID sets the "msg_id" field.
func (msuo *MessageSendUpdateOne) SetMsgID(i int64) *MessageSendUpdateOne {
	msuo.mutation.ResetMsgID()
	msuo.mutation.SetMsgID(i)
	return msuo
}

// AddMsgID adds i to the "msg_id" field.
func (msuo *MessageSendUpdateOne) AddMsgID(i int64) *MessageSendUpdateOne {
	msuo.mutation.AddMsgID(i)
	return msuo
}

// SetClientMsgID sets the "client_msg_id" field.
func (msuo *MessageSendUpdateOne) SetClientMsgID(s string) *MessageSendUpdateOne {
	msuo.mutation.SetClientMsgID(s)
	return msuo
}

// SetFromID sets the "from_id" field.
func (msuo *MessageSendUpdateOne) SetFromID(i int64) *MessageSendUpdateOne {
	msuo.mutation.ResetFromID()
	msuo.mutation.SetFromID(i)
	return msuo
}

// AddFromID adds i to the "from_id" field.
func (msuo *MessageSendUpdateOne) AddFromID(i int64) *MessageSendUpdateOne {
	msuo.mutation.AddFromID(i)
	return msuo
}

// SetToID sets the "to_id" field.
func (msuo *MessageSendUpdateOne) SetToID(i int64) *MessageSendUpdateOne {
	msuo.mutation.ResetToID()
	msuo.mutation.SetToID(i)
	return msuo
}

// AddToID adds i to the "to_id" field.
func (msuo *MessageSendUpdateOne) AddToID(i int64) *MessageSendUpdateOne {
	msuo.mutation.AddToID(i)
	return msuo
}

// SetGroupID sets the "group_id" field.
func (msuo *MessageSendUpdateOne) SetGroupID(i int64) *MessageSendUpdateOne {
	msuo.mutation.ResetGroupID()
	msuo.mutation.SetGroupID(i)
	return msuo
}

// AddGroupID adds i to the "group_id" field.
func (msuo *MessageSendUpdateOne) AddGroupID(i int64) *MessageSendUpdateOne {
	msuo.mutation.AddGroupID(i)
	return msuo
}

// SetMsgType sets the "msg_type" field.
func (msuo *MessageSendUpdateOne) SetMsgType(i int) *MessageSendUpdateOne {
	msuo.mutation.ResetMsgType()
	msuo.mutation.SetMsgType(i)
	return msuo
}

// AddMsgType adds i to the "msg_type" field.
func (msuo *MessageSendUpdateOne) AddMsgType(i int) *MessageSendUpdateOne {
	msuo.mutation.AddMsgType(i)
	return msuo
}

// SetMsgContent sets the "msg_content" field.
func (msuo *MessageSendUpdateOne) SetMsgContent(s string) *MessageSendUpdateOne {
	msuo.mutation.SetMsgContent(s)
	return msuo
}

// SetMsgResCode sets the "msg_res_code" field.
func (msuo *MessageSendUpdateOne) SetMsgResCode(i int16) *MessageSendUpdateOne {
	msuo.mutation.ResetMsgResCode()
	msuo.mutation.SetMsgResCode(i)
	return msuo
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (msuo *MessageSendUpdateOne) AddMsgResCode(i int16) *MessageSendUpdateOne {
	msuo.mutation.AddMsgResCode(i)
	return msuo
}

// SetMsgFeature sets the "msg_feature" field.
func (msuo *MessageSendUpdateOne) SetMsgFeature(i int16) *MessageSendUpdateOne {
	msuo.mutation.ResetMsgFeature()
	msuo.mutation.SetMsgFeature(i)
	return msuo
}

// AddMsgFeature adds i to the "msg_feature" field.
func (msuo *MessageSendUpdateOne) AddMsgFeature(i int16) *MessageSendUpdateOne {
	msuo.mutation.AddMsgFeature(i)
	return msuo
}

// SetMsgStatus sets the "msg_status" field.
func (msuo *MessageSendUpdateOne) SetMsgStatus(i int16) *MessageSendUpdateOne {
	msuo.mutation.ResetMsgStatus()
	msuo.mutation.SetMsgStatus(i)
	return msuo
}

// AddMsgStatus adds i to the "msg_status" field.
func (msuo *MessageSendUpdateOne) AddMsgStatus(i int16) *MessageSendUpdateOne {
	msuo.mutation.AddMsgStatus(i)
	return msuo
}

// SetUpdatedAt sets the "updated_at" field.
func (msuo *MessageSendUpdateOne) SetUpdatedAt(t time.Time) *MessageSendUpdateOne {
	msuo.mutation.SetUpdatedAt(t)
	return msuo
}

// Mutation returns the MessageSendMutation object of the builder.
func (msuo *MessageSendUpdateOne) Mutation() *MessageSendMutation {
	return msuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MessageSendUpdateOne) Select(field string, fields ...string) *MessageSendUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MessageSend entity.
func (msuo *MessageSendUpdateOne) Save(ctx context.Context) (*MessageSend, error) {
	var (
		err  error
		node *MessageSend
	)
	msuo.defaults()
	if len(msuo.hooks) == 0 {
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageSendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			if msuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, msuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MessageSend)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageSendMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MessageSendUpdateOne) SaveX(ctx context.Context) *MessageSend {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MessageSendUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MessageSendUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msuo *MessageSendUpdateOne) defaults() {
	if _, ok := msuo.mutation.UpdatedAt(); !ok {
		v := messagesend.UpdateDefaultUpdatedAt()
		msuo.mutation.SetUpdatedAt(v)
	}
}

func (msuo *MessageSendUpdateOne) sqlSave(ctx context.Context) (_node *MessageSend, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagesend.Table,
			Columns: messagesend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagesend.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageSend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagesend.FieldID)
		for _, f := range fields {
			if !messagesend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagesend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.MsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldMsgID,
		})
	}
	if value, ok := msuo.mutation.AddedMsgID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldMsgID,
		})
	}
	if value, ok := msuo.mutation.ClientMsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagesend.FieldClientMsgID,
		})
	}
	if value, ok := msuo.mutation.FromID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldFromID,
		})
	}
	if value, ok := msuo.mutation.AddedFromID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldFromID,
		})
	}
	if value, ok := msuo.mutation.ToID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldToID,
		})
	}
	if value, ok := msuo.mutation.AddedToID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldToID,
		})
	}
	if value, ok := msuo.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldGroupID,
		})
	}
	if value, ok := msuo.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldGroupID,
		})
	}
	if value, ok := msuo.mutation.MsgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagesend.FieldMsgType,
		})
	}
	if value, ok := msuo.mutation.AddedMsgType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagesend.FieldMsgType,
		})
	}
	if value, ok := msuo.mutation.MsgContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagesend.FieldMsgContent,
		})
	}
	if value, ok := msuo.mutation.MsgResCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgResCode,
		})
	}
	if value, ok := msuo.mutation.AddedMsgResCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgResCode,
		})
	}
	if value, ok := msuo.mutation.MsgFeature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgFeature,
		})
	}
	if value, ok := msuo.mutation.AddedMsgFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgFeature,
		})
	}
	if value, ok := msuo.mutation.MsgStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgStatus,
		})
	}
	if value, ok := msuo.mutation.AddedMsgStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgStatus,
		})
	}
	if value, ok := msuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagesend.FieldUpdatedAt,
		})
	}
	_node = &MessageSend{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagesend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
