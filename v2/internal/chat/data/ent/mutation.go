// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CoffeeChat/internal/chat/data/ent/messagerecv"
	"CoffeeChat/internal/chat/data/ent/messagesend"
	"CoffeeChat/internal/chat/data/ent/predicate"
	"CoffeeChat/internal/chat/data/ent/session"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMessageRecv = "MessageRecv"
	TypeMessageSend = "MessageSend"
	TypeSession     = "Session"
)

// MessageRecvMutation represents an operation that mutates the MessageRecv nodes in the graph.
type MessageRecvMutation struct {
	config
	op              Op
	typ             string
	id              *int
	msg_id          *int64
	addmsg_id       *int64
	client_msg_id   *string
	from_id         *int64
	addfrom_id      *int64
	to_id           *int64
	addto_id        *int64
	group_id        *int64
	addgroup_id     *int64
	msg_type        *int
	addmsg_type     *int
	msg_content     *string
	msg_res_code    *int16
	addmsg_res_code *int16
	msg_feature     *int16
	addmsg_feature  *int16
	msg_status      *int16
	addmsg_status   *int16
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*MessageRecv, error)
	predicates      []predicate.MessageRecv
}

var _ ent.Mutation = (*MessageRecvMutation)(nil)

// messagerecvOption allows management of the mutation configuration using functional options.
type messagerecvOption func(*MessageRecvMutation)

// newMessageRecvMutation creates new mutation for the MessageRecv entity.
func newMessageRecvMutation(c config, op Op, opts ...messagerecvOption) *MessageRecvMutation {
	m := &MessageRecvMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageRecv,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageRecvID sets the ID field of the mutation.
func withMessageRecvID(id int) messagerecvOption {
	return func(m *MessageRecvMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageRecv
		)
		m.oldValue = func(ctx context.Context) (*MessageRecv, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageRecv.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageRecv sets the old MessageRecv of the mutation.
func withMessageRecv(node *MessageRecv) messagerecvOption {
	return func(m *MessageRecvMutation) {
		m.oldValue = func(context.Context) (*MessageRecv, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageRecvMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageRecvMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MessageRecv entities.
func (m *MessageRecvMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageRecvMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageRecvMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageRecv.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgID sets the "msg_id" field.
func (m *MessageRecvMutation) SetMsgID(i int64) {
	m.msg_id = &i
	m.addmsg_id = nil
}

// MsgID returns the value of the "msg_id" field in the mutation.
func (m *MessageRecvMutation) MsgID() (r int64, exists bool) {
	v := m.msg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgID returns the old "msg_id" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldMsgID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgID: %w", err)
	}
	return oldValue.MsgID, nil
}

// AddMsgID adds i to the "msg_id" field.
func (m *MessageRecvMutation) AddMsgID(i int64) {
	if m.addmsg_id != nil {
		*m.addmsg_id += i
	} else {
		m.addmsg_id = &i
	}
}

// AddedMsgID returns the value that was added to the "msg_id" field in this mutation.
func (m *MessageRecvMutation) AddedMsgID() (r int64, exists bool) {
	v := m.addmsg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgID resets all changes to the "msg_id" field.
func (m *MessageRecvMutation) ResetMsgID() {
	m.msg_id = nil
	m.addmsg_id = nil
}

// SetClientMsgID sets the "client_msg_id" field.
func (m *MessageRecvMutation) SetClientMsgID(s string) {
	m.client_msg_id = &s
}

// ClientMsgID returns the value of the "client_msg_id" field in the mutation.
func (m *MessageRecvMutation) ClientMsgID() (r string, exists bool) {
	v := m.client_msg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientMsgID returns the old "client_msg_id" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldClientMsgID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientMsgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientMsgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientMsgID: %w", err)
	}
	return oldValue.ClientMsgID, nil
}

// ResetClientMsgID resets all changes to the "client_msg_id" field.
func (m *MessageRecvMutation) ResetClientMsgID() {
	m.client_msg_id = nil
}

// SetFromID sets the "from_id" field.
func (m *MessageRecvMutation) SetFromID(i int64) {
	m.from_id = &i
	m.addfrom_id = nil
}

// FromID returns the value of the "from_id" field in the mutation.
func (m *MessageRecvMutation) FromID() (r int64, exists bool) {
	v := m.from_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromID returns the old "from_id" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldFromID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromID: %w", err)
	}
	return oldValue.FromID, nil
}

// AddFromID adds i to the "from_id" field.
func (m *MessageRecvMutation) AddFromID(i int64) {
	if m.addfrom_id != nil {
		*m.addfrom_id += i
	} else {
		m.addfrom_id = &i
	}
}

// AddedFromID returns the value that was added to the "from_id" field in this mutation.
func (m *MessageRecvMutation) AddedFromID() (r int64, exists bool) {
	v := m.addfrom_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromID resets all changes to the "from_id" field.
func (m *MessageRecvMutation) ResetFromID() {
	m.from_id = nil
	m.addfrom_id = nil
}

// SetToID sets the "to_id" field.
func (m *MessageRecvMutation) SetToID(i int64) {
	m.to_id = &i
	m.addto_id = nil
}

// ToID returns the value of the "to_id" field in the mutation.
func (m *MessageRecvMutation) ToID() (r int64, exists bool) {
	v := m.to_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToID returns the old "to_id" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldToID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToID: %w", err)
	}
	return oldValue.ToID, nil
}

// AddToID adds i to the "to_id" field.
func (m *MessageRecvMutation) AddToID(i int64) {
	if m.addto_id != nil {
		*m.addto_id += i
	} else {
		m.addto_id = &i
	}
}

// AddedToID returns the value that was added to the "to_id" field in this mutation.
func (m *MessageRecvMutation) AddedToID() (r int64, exists bool) {
	v := m.addto_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetToID resets all changes to the "to_id" field.
func (m *MessageRecvMutation) ResetToID() {
	m.to_id = nil
	m.addto_id = nil
}

// SetGroupID sets the "group_id" field.
func (m *MessageRecvMutation) SetGroupID(i int64) {
	m.group_id = &i
	m.addgroup_id = nil
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *MessageRecvMutation) GroupID() (r int64, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldGroupID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// AddGroupID adds i to the "group_id" field.
func (m *MessageRecvMutation) AddGroupID(i int64) {
	if m.addgroup_id != nil {
		*m.addgroup_id += i
	} else {
		m.addgroup_id = &i
	}
}

// AddedGroupID returns the value that was added to the "group_id" field in this mutation.
func (m *MessageRecvMutation) AddedGroupID() (r int64, exists bool) {
	v := m.addgroup_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *MessageRecvMutation) ResetGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
}

// SetMsgType sets the "msg_type" field.
func (m *MessageRecvMutation) SetMsgType(i int) {
	m.msg_type = &i
	m.addmsg_type = nil
}

// MsgType returns the value of the "msg_type" field in the mutation.
func (m *MessageRecvMutation) MsgType() (r int, exists bool) {
	v := m.msg_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgType returns the old "msg_type" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldMsgType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgType: %w", err)
	}
	return oldValue.MsgType, nil
}

// AddMsgType adds i to the "msg_type" field.
func (m *MessageRecvMutation) AddMsgType(i int) {
	if m.addmsg_type != nil {
		*m.addmsg_type += i
	} else {
		m.addmsg_type = &i
	}
}

// AddedMsgType returns the value that was added to the "msg_type" field in this mutation.
func (m *MessageRecvMutation) AddedMsgType() (r int, exists bool) {
	v := m.addmsg_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgType resets all changes to the "msg_type" field.
func (m *MessageRecvMutation) ResetMsgType() {
	m.msg_type = nil
	m.addmsg_type = nil
}

// SetMsgContent sets the "msg_content" field.
func (m *MessageRecvMutation) SetMsgContent(s string) {
	m.msg_content = &s
}

// MsgContent returns the value of the "msg_content" field in the mutation.
func (m *MessageRecvMutation) MsgContent() (r string, exists bool) {
	v := m.msg_content
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgContent returns the old "msg_content" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldMsgContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgContent: %w", err)
	}
	return oldValue.MsgContent, nil
}

// ResetMsgContent resets all changes to the "msg_content" field.
func (m *MessageRecvMutation) ResetMsgContent() {
	m.msg_content = nil
}

// SetMsgResCode sets the "msg_res_code" field.
func (m *MessageRecvMutation) SetMsgResCode(i int16) {
	m.msg_res_code = &i
	m.addmsg_res_code = nil
}

// MsgResCode returns the value of the "msg_res_code" field in the mutation.
func (m *MessageRecvMutation) MsgResCode() (r int16, exists bool) {
	v := m.msg_res_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgResCode returns the old "msg_res_code" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldMsgResCode(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgResCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgResCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgResCode: %w", err)
	}
	return oldValue.MsgResCode, nil
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (m *MessageRecvMutation) AddMsgResCode(i int16) {
	if m.addmsg_res_code != nil {
		*m.addmsg_res_code += i
	} else {
		m.addmsg_res_code = &i
	}
}

// AddedMsgResCode returns the value that was added to the "msg_res_code" field in this mutation.
func (m *MessageRecvMutation) AddedMsgResCode() (r int16, exists bool) {
	v := m.addmsg_res_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgResCode resets all changes to the "msg_res_code" field.
func (m *MessageRecvMutation) ResetMsgResCode() {
	m.msg_res_code = nil
	m.addmsg_res_code = nil
}

// SetMsgFeature sets the "msg_feature" field.
func (m *MessageRecvMutation) SetMsgFeature(i int16) {
	m.msg_feature = &i
	m.addmsg_feature = nil
}

// MsgFeature returns the value of the "msg_feature" field in the mutation.
func (m *MessageRecvMutation) MsgFeature() (r int16, exists bool) {
	v := m.msg_feature
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgFeature returns the old "msg_feature" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldMsgFeature(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgFeature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgFeature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgFeature: %w", err)
	}
	return oldValue.MsgFeature, nil
}

// AddMsgFeature adds i to the "msg_feature" field.
func (m *MessageRecvMutation) AddMsgFeature(i int16) {
	if m.addmsg_feature != nil {
		*m.addmsg_feature += i
	} else {
		m.addmsg_feature = &i
	}
}

// AddedMsgFeature returns the value that was added to the "msg_feature" field in this mutation.
func (m *MessageRecvMutation) AddedMsgFeature() (r int16, exists bool) {
	v := m.addmsg_feature
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgFeature resets all changes to the "msg_feature" field.
func (m *MessageRecvMutation) ResetMsgFeature() {
	m.msg_feature = nil
	m.addmsg_feature = nil
}

// SetMsgStatus sets the "msg_status" field.
func (m *MessageRecvMutation) SetMsgStatus(i int16) {
	m.msg_status = &i
	m.addmsg_status = nil
}

// MsgStatus returns the value of the "msg_status" field in the mutation.
func (m *MessageRecvMutation) MsgStatus() (r int16, exists bool) {
	v := m.msg_status
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgStatus returns the old "msg_status" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldMsgStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgStatus: %w", err)
	}
	return oldValue.MsgStatus, nil
}

// AddMsgStatus adds i to the "msg_status" field.
func (m *MessageRecvMutation) AddMsgStatus(i int16) {
	if m.addmsg_status != nil {
		*m.addmsg_status += i
	} else {
		m.addmsg_status = &i
	}
}

// AddedMsgStatus returns the value that was added to the "msg_status" field in this mutation.
func (m *MessageRecvMutation) AddedMsgStatus() (r int16, exists bool) {
	v := m.addmsg_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgStatus resets all changes to the "msg_status" field.
func (m *MessageRecvMutation) ResetMsgStatus() {
	m.msg_status = nil
	m.addmsg_status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageRecvMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageRecvMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageRecvMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MessageRecvMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MessageRecvMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MessageRecv entity.
// If the MessageRecv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageRecvMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MessageRecvMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MessageRecvMutation builder.
func (m *MessageRecvMutation) Where(ps ...predicate.MessageRecv) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageRecvMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MessageRecv).
func (m *MessageRecvMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageRecvMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.msg_id != nil {
		fields = append(fields, messagerecv.FieldMsgID)
	}
	if m.client_msg_id != nil {
		fields = append(fields, messagerecv.FieldClientMsgID)
	}
	if m.from_id != nil {
		fields = append(fields, messagerecv.FieldFromID)
	}
	if m.to_id != nil {
		fields = append(fields, messagerecv.FieldToID)
	}
	if m.group_id != nil {
		fields = append(fields, messagerecv.FieldGroupID)
	}
	if m.msg_type != nil {
		fields = append(fields, messagerecv.FieldMsgType)
	}
	if m.msg_content != nil {
		fields = append(fields, messagerecv.FieldMsgContent)
	}
	if m.msg_res_code != nil {
		fields = append(fields, messagerecv.FieldMsgResCode)
	}
	if m.msg_feature != nil {
		fields = append(fields, messagerecv.FieldMsgFeature)
	}
	if m.msg_status != nil {
		fields = append(fields, messagerecv.FieldMsgStatus)
	}
	if m.created_at != nil {
		fields = append(fields, messagerecv.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, messagerecv.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageRecvMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagerecv.FieldMsgID:
		return m.MsgID()
	case messagerecv.FieldClientMsgID:
		return m.ClientMsgID()
	case messagerecv.FieldFromID:
		return m.FromID()
	case messagerecv.FieldToID:
		return m.ToID()
	case messagerecv.FieldGroupID:
		return m.GroupID()
	case messagerecv.FieldMsgType:
		return m.MsgType()
	case messagerecv.FieldMsgContent:
		return m.MsgContent()
	case messagerecv.FieldMsgResCode:
		return m.MsgResCode()
	case messagerecv.FieldMsgFeature:
		return m.MsgFeature()
	case messagerecv.FieldMsgStatus:
		return m.MsgStatus()
	case messagerecv.FieldCreatedAt:
		return m.CreatedAt()
	case messagerecv.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageRecvMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagerecv.FieldMsgID:
		return m.OldMsgID(ctx)
	case messagerecv.FieldClientMsgID:
		return m.OldClientMsgID(ctx)
	case messagerecv.FieldFromID:
		return m.OldFromID(ctx)
	case messagerecv.FieldToID:
		return m.OldToID(ctx)
	case messagerecv.FieldGroupID:
		return m.OldGroupID(ctx)
	case messagerecv.FieldMsgType:
		return m.OldMsgType(ctx)
	case messagerecv.FieldMsgContent:
		return m.OldMsgContent(ctx)
	case messagerecv.FieldMsgResCode:
		return m.OldMsgResCode(ctx)
	case messagerecv.FieldMsgFeature:
		return m.OldMsgFeature(ctx)
	case messagerecv.FieldMsgStatus:
		return m.OldMsgStatus(ctx)
	case messagerecv.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case messagerecv.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MessageRecv field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageRecvMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagerecv.FieldMsgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgID(v)
		return nil
	case messagerecv.FieldClientMsgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientMsgID(v)
		return nil
	case messagerecv.FieldFromID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromID(v)
		return nil
	case messagerecv.FieldToID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToID(v)
		return nil
	case messagerecv.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case messagerecv.FieldMsgType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgType(v)
		return nil
	case messagerecv.FieldMsgContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgContent(v)
		return nil
	case messagerecv.FieldMsgResCode:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgResCode(v)
		return nil
	case messagerecv.FieldMsgFeature:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgFeature(v)
		return nil
	case messagerecv.FieldMsgStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgStatus(v)
		return nil
	case messagerecv.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case messagerecv.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MessageRecv field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageRecvMutation) AddedFields() []string {
	var fields []string
	if m.addmsg_id != nil {
		fields = append(fields, messagerecv.FieldMsgID)
	}
	if m.addfrom_id != nil {
		fields = append(fields, messagerecv.FieldFromID)
	}
	if m.addto_id != nil {
		fields = append(fields, messagerecv.FieldToID)
	}
	if m.addgroup_id != nil {
		fields = append(fields, messagerecv.FieldGroupID)
	}
	if m.addmsg_type != nil {
		fields = append(fields, messagerecv.FieldMsgType)
	}
	if m.addmsg_res_code != nil {
		fields = append(fields, messagerecv.FieldMsgResCode)
	}
	if m.addmsg_feature != nil {
		fields = append(fields, messagerecv.FieldMsgFeature)
	}
	if m.addmsg_status != nil {
		fields = append(fields, messagerecv.FieldMsgStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageRecvMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messagerecv.FieldMsgID:
		return m.AddedMsgID()
	case messagerecv.FieldFromID:
		return m.AddedFromID()
	case messagerecv.FieldToID:
		return m.AddedToID()
	case messagerecv.FieldGroupID:
		return m.AddedGroupID()
	case messagerecv.FieldMsgType:
		return m.AddedMsgType()
	case messagerecv.FieldMsgResCode:
		return m.AddedMsgResCode()
	case messagerecv.FieldMsgFeature:
		return m.AddedMsgFeature()
	case messagerecv.FieldMsgStatus:
		return m.AddedMsgStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageRecvMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messagerecv.FieldMsgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgID(v)
		return nil
	case messagerecv.FieldFromID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromID(v)
		return nil
	case messagerecv.FieldToID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToID(v)
		return nil
	case messagerecv.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupID(v)
		return nil
	case messagerecv.FieldMsgType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgType(v)
		return nil
	case messagerecv.FieldMsgResCode:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgResCode(v)
		return nil
	case messagerecv.FieldMsgFeature:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgFeature(v)
		return nil
	case messagerecv.FieldMsgStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgStatus(v)
		return nil
	}
	return fmt.Errorf("unknown MessageRecv numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageRecvMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageRecvMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageRecvMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageRecv nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageRecvMutation) ResetField(name string) error {
	switch name {
	case messagerecv.FieldMsgID:
		m.ResetMsgID()
		return nil
	case messagerecv.FieldClientMsgID:
		m.ResetClientMsgID()
		return nil
	case messagerecv.FieldFromID:
		m.ResetFromID()
		return nil
	case messagerecv.FieldToID:
		m.ResetToID()
		return nil
	case messagerecv.FieldGroupID:
		m.ResetGroupID()
		return nil
	case messagerecv.FieldMsgType:
		m.ResetMsgType()
		return nil
	case messagerecv.FieldMsgContent:
		m.ResetMsgContent()
		return nil
	case messagerecv.FieldMsgResCode:
		m.ResetMsgResCode()
		return nil
	case messagerecv.FieldMsgFeature:
		m.ResetMsgFeature()
		return nil
	case messagerecv.FieldMsgStatus:
		m.ResetMsgStatus()
		return nil
	case messagerecv.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case messagerecv.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MessageRecv field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageRecvMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageRecvMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageRecvMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageRecvMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageRecvMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageRecvMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageRecvMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageRecv unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageRecvMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageRecv edge %s", name)
}

// MessageSendMutation represents an operation that mutates the MessageSend nodes in the graph.
type MessageSendMutation struct {
	config
	op              Op
	typ             string
	id              *int
	msg_id          *int64
	addmsg_id       *int64
	client_msg_id   *string
	from_id         *int64
	addfrom_id      *int64
	to_id           *int64
	addto_id        *int64
	group_id        *int64
	addgroup_id     *int64
	msg_type        *int
	addmsg_type     *int
	msg_content     *string
	msg_res_code    *int16
	addmsg_res_code *int16
	msg_feature     *int16
	addmsg_feature  *int16
	msg_status      *int16
	addmsg_status   *int16
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*MessageSend, error)
	predicates      []predicate.MessageSend
}

var _ ent.Mutation = (*MessageSendMutation)(nil)

// messagesendOption allows management of the mutation configuration using functional options.
type messagesendOption func(*MessageSendMutation)

// newMessageSendMutation creates new mutation for the MessageSend entity.
func newMessageSendMutation(c config, op Op, opts ...messagesendOption) *MessageSendMutation {
	m := &MessageSendMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageSend,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageSendID sets the ID field of the mutation.
func withMessageSendID(id int) messagesendOption {
	return func(m *MessageSendMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageSend
		)
		m.oldValue = func(ctx context.Context) (*MessageSend, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageSend.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageSend sets the old MessageSend of the mutation.
func withMessageSend(node *MessageSend) messagesendOption {
	return func(m *MessageSendMutation) {
		m.oldValue = func(context.Context) (*MessageSend, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageSendMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageSendMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MessageSend entities.
func (m *MessageSendMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageSendMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageSendMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageSend.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgID sets the "msg_id" field.
func (m *MessageSendMutation) SetMsgID(i int64) {
	m.msg_id = &i
	m.addmsg_id = nil
}

// MsgID returns the value of the "msg_id" field in the mutation.
func (m *MessageSendMutation) MsgID() (r int64, exists bool) {
	v := m.msg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgID returns the old "msg_id" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldMsgID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgID: %w", err)
	}
	return oldValue.MsgID, nil
}

// AddMsgID adds i to the "msg_id" field.
func (m *MessageSendMutation) AddMsgID(i int64) {
	if m.addmsg_id != nil {
		*m.addmsg_id += i
	} else {
		m.addmsg_id = &i
	}
}

// AddedMsgID returns the value that was added to the "msg_id" field in this mutation.
func (m *MessageSendMutation) AddedMsgID() (r int64, exists bool) {
	v := m.addmsg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgID resets all changes to the "msg_id" field.
func (m *MessageSendMutation) ResetMsgID() {
	m.msg_id = nil
	m.addmsg_id = nil
}

// SetClientMsgID sets the "client_msg_id" field.
func (m *MessageSendMutation) SetClientMsgID(s string) {
	m.client_msg_id = &s
}

// ClientMsgID returns the value of the "client_msg_id" field in the mutation.
func (m *MessageSendMutation) ClientMsgID() (r string, exists bool) {
	v := m.client_msg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientMsgID returns the old "client_msg_id" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldClientMsgID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientMsgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientMsgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientMsgID: %w", err)
	}
	return oldValue.ClientMsgID, nil
}

// ResetClientMsgID resets all changes to the "client_msg_id" field.
func (m *MessageSendMutation) ResetClientMsgID() {
	m.client_msg_id = nil
}

// SetFromID sets the "from_id" field.
func (m *MessageSendMutation) SetFromID(i int64) {
	m.from_id = &i
	m.addfrom_id = nil
}

// FromID returns the value of the "from_id" field in the mutation.
func (m *MessageSendMutation) FromID() (r int64, exists bool) {
	v := m.from_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromID returns the old "from_id" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldFromID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromID: %w", err)
	}
	return oldValue.FromID, nil
}

// AddFromID adds i to the "from_id" field.
func (m *MessageSendMutation) AddFromID(i int64) {
	if m.addfrom_id != nil {
		*m.addfrom_id += i
	} else {
		m.addfrom_id = &i
	}
}

// AddedFromID returns the value that was added to the "from_id" field in this mutation.
func (m *MessageSendMutation) AddedFromID() (r int64, exists bool) {
	v := m.addfrom_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromID resets all changes to the "from_id" field.
func (m *MessageSendMutation) ResetFromID() {
	m.from_id = nil
	m.addfrom_id = nil
}

// SetToID sets the "to_id" field.
func (m *MessageSendMutation) SetToID(i int64) {
	m.to_id = &i
	m.addto_id = nil
}

// ToID returns the value of the "to_id" field in the mutation.
func (m *MessageSendMutation) ToID() (r int64, exists bool) {
	v := m.to_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToID returns the old "to_id" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldToID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToID: %w", err)
	}
	return oldValue.ToID, nil
}

// AddToID adds i to the "to_id" field.
func (m *MessageSendMutation) AddToID(i int64) {
	if m.addto_id != nil {
		*m.addto_id += i
	} else {
		m.addto_id = &i
	}
}

// AddedToID returns the value that was added to the "to_id" field in this mutation.
func (m *MessageSendMutation) AddedToID() (r int64, exists bool) {
	v := m.addto_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetToID resets all changes to the "to_id" field.
func (m *MessageSendMutation) ResetToID() {
	m.to_id = nil
	m.addto_id = nil
}

// SetGroupID sets the "group_id" field.
func (m *MessageSendMutation) SetGroupID(i int64) {
	m.group_id = &i
	m.addgroup_id = nil
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *MessageSendMutation) GroupID() (r int64, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldGroupID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// AddGroupID adds i to the "group_id" field.
func (m *MessageSendMutation) AddGroupID(i int64) {
	if m.addgroup_id != nil {
		*m.addgroup_id += i
	} else {
		m.addgroup_id = &i
	}
}

// AddedGroupID returns the value that was added to the "group_id" field in this mutation.
func (m *MessageSendMutation) AddedGroupID() (r int64, exists bool) {
	v := m.addgroup_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *MessageSendMutation) ResetGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
}

// SetMsgType sets the "msg_type" field.
func (m *MessageSendMutation) SetMsgType(i int) {
	m.msg_type = &i
	m.addmsg_type = nil
}

// MsgType returns the value of the "msg_type" field in the mutation.
func (m *MessageSendMutation) MsgType() (r int, exists bool) {
	v := m.msg_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgType returns the old "msg_type" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldMsgType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgType: %w", err)
	}
	return oldValue.MsgType, nil
}

// AddMsgType adds i to the "msg_type" field.
func (m *MessageSendMutation) AddMsgType(i int) {
	if m.addmsg_type != nil {
		*m.addmsg_type += i
	} else {
		m.addmsg_type = &i
	}
}

// AddedMsgType returns the value that was added to the "msg_type" field in this mutation.
func (m *MessageSendMutation) AddedMsgType() (r int, exists bool) {
	v := m.addmsg_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgType resets all changes to the "msg_type" field.
func (m *MessageSendMutation) ResetMsgType() {
	m.msg_type = nil
	m.addmsg_type = nil
}

// SetMsgContent sets the "msg_content" field.
func (m *MessageSendMutation) SetMsgContent(s string) {
	m.msg_content = &s
}

// MsgContent returns the value of the "msg_content" field in the mutation.
func (m *MessageSendMutation) MsgContent() (r string, exists bool) {
	v := m.msg_content
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgContent returns the old "msg_content" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldMsgContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgContent: %w", err)
	}
	return oldValue.MsgContent, nil
}

// ResetMsgContent resets all changes to the "msg_content" field.
func (m *MessageSendMutation) ResetMsgContent() {
	m.msg_content = nil
}

// SetMsgResCode sets the "msg_res_code" field.
func (m *MessageSendMutation) SetMsgResCode(i int16) {
	m.msg_res_code = &i
	m.addmsg_res_code = nil
}

// MsgResCode returns the value of the "msg_res_code" field in the mutation.
func (m *MessageSendMutation) MsgResCode() (r int16, exists bool) {
	v := m.msg_res_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgResCode returns the old "msg_res_code" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldMsgResCode(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgResCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgResCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgResCode: %w", err)
	}
	return oldValue.MsgResCode, nil
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (m *MessageSendMutation) AddMsgResCode(i int16) {
	if m.addmsg_res_code != nil {
		*m.addmsg_res_code += i
	} else {
		m.addmsg_res_code = &i
	}
}

// AddedMsgResCode returns the value that was added to the "msg_res_code" field in this mutation.
func (m *MessageSendMutation) AddedMsgResCode() (r int16, exists bool) {
	v := m.addmsg_res_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgResCode resets all changes to the "msg_res_code" field.
func (m *MessageSendMutation) ResetMsgResCode() {
	m.msg_res_code = nil
	m.addmsg_res_code = nil
}

// SetMsgFeature sets the "msg_feature" field.
func (m *MessageSendMutation) SetMsgFeature(i int16) {
	m.msg_feature = &i
	m.addmsg_feature = nil
}

// MsgFeature returns the value of the "msg_feature" field in the mutation.
func (m *MessageSendMutation) MsgFeature() (r int16, exists bool) {
	v := m.msg_feature
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgFeature returns the old "msg_feature" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldMsgFeature(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgFeature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgFeature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgFeature: %w", err)
	}
	return oldValue.MsgFeature, nil
}

// AddMsgFeature adds i to the "msg_feature" field.
func (m *MessageSendMutation) AddMsgFeature(i int16) {
	if m.addmsg_feature != nil {
		*m.addmsg_feature += i
	} else {
		m.addmsg_feature = &i
	}
}

// AddedMsgFeature returns the value that was added to the "msg_feature" field in this mutation.
func (m *MessageSendMutation) AddedMsgFeature() (r int16, exists bool) {
	v := m.addmsg_feature
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgFeature resets all changes to the "msg_feature" field.
func (m *MessageSendMutation) ResetMsgFeature() {
	m.msg_feature = nil
	m.addmsg_feature = nil
}

// SetMsgStatus sets the "msg_status" field.
func (m *MessageSendMutation) SetMsgStatus(i int16) {
	m.msg_status = &i
	m.addmsg_status = nil
}

// MsgStatus returns the value of the "msg_status" field in the mutation.
func (m *MessageSendMutation) MsgStatus() (r int16, exists bool) {
	v := m.msg_status
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgStatus returns the old "msg_status" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldMsgStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgStatus: %w", err)
	}
	return oldValue.MsgStatus, nil
}

// AddMsgStatus adds i to the "msg_status" field.
func (m *MessageSendMutation) AddMsgStatus(i int16) {
	if m.addmsg_status != nil {
		*m.addmsg_status += i
	} else {
		m.addmsg_status = &i
	}
}

// AddedMsgStatus returns the value that was added to the "msg_status" field in this mutation.
func (m *MessageSendMutation) AddedMsgStatus() (r int16, exists bool) {
	v := m.addmsg_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgStatus resets all changes to the "msg_status" field.
func (m *MessageSendMutation) ResetMsgStatus() {
	m.msg_status = nil
	m.addmsg_status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageSendMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageSendMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageSendMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MessageSendMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MessageSendMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MessageSend entity.
// If the MessageSend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageSendMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MessageSendMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MessageSendMutation builder.
func (m *MessageSendMutation) Where(ps ...predicate.MessageSend) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageSendMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MessageSend).
func (m *MessageSendMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageSendMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.msg_id != nil {
		fields = append(fields, messagesend.FieldMsgID)
	}
	if m.client_msg_id != nil {
		fields = append(fields, messagesend.FieldClientMsgID)
	}
	if m.from_id != nil {
		fields = append(fields, messagesend.FieldFromID)
	}
	if m.to_id != nil {
		fields = append(fields, messagesend.FieldToID)
	}
	if m.group_id != nil {
		fields = append(fields, messagesend.FieldGroupID)
	}
	if m.msg_type != nil {
		fields = append(fields, messagesend.FieldMsgType)
	}
	if m.msg_content != nil {
		fields = append(fields, messagesend.FieldMsgContent)
	}
	if m.msg_res_code != nil {
		fields = append(fields, messagesend.FieldMsgResCode)
	}
	if m.msg_feature != nil {
		fields = append(fields, messagesend.FieldMsgFeature)
	}
	if m.msg_status != nil {
		fields = append(fields, messagesend.FieldMsgStatus)
	}
	if m.created_at != nil {
		fields = append(fields, messagesend.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, messagesend.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageSendMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagesend.FieldMsgID:
		return m.MsgID()
	case messagesend.FieldClientMsgID:
		return m.ClientMsgID()
	case messagesend.FieldFromID:
		return m.FromID()
	case messagesend.FieldToID:
		return m.ToID()
	case messagesend.FieldGroupID:
		return m.GroupID()
	case messagesend.FieldMsgType:
		return m.MsgType()
	case messagesend.FieldMsgContent:
		return m.MsgContent()
	case messagesend.FieldMsgResCode:
		return m.MsgResCode()
	case messagesend.FieldMsgFeature:
		return m.MsgFeature()
	case messagesend.FieldMsgStatus:
		return m.MsgStatus()
	case messagesend.FieldCreatedAt:
		return m.CreatedAt()
	case messagesend.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageSendMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagesend.FieldMsgID:
		return m.OldMsgID(ctx)
	case messagesend.FieldClientMsgID:
		return m.OldClientMsgID(ctx)
	case messagesend.FieldFromID:
		return m.OldFromID(ctx)
	case messagesend.FieldToID:
		return m.OldToID(ctx)
	case messagesend.FieldGroupID:
		return m.OldGroupID(ctx)
	case messagesend.FieldMsgType:
		return m.OldMsgType(ctx)
	case messagesend.FieldMsgContent:
		return m.OldMsgContent(ctx)
	case messagesend.FieldMsgResCode:
		return m.OldMsgResCode(ctx)
	case messagesend.FieldMsgFeature:
		return m.OldMsgFeature(ctx)
	case messagesend.FieldMsgStatus:
		return m.OldMsgStatus(ctx)
	case messagesend.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case messagesend.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MessageSend field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageSendMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagesend.FieldMsgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgID(v)
		return nil
	case messagesend.FieldClientMsgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientMsgID(v)
		return nil
	case messagesend.FieldFromID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromID(v)
		return nil
	case messagesend.FieldToID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToID(v)
		return nil
	case messagesend.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case messagesend.FieldMsgType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgType(v)
		return nil
	case messagesend.FieldMsgContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgContent(v)
		return nil
	case messagesend.FieldMsgResCode:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgResCode(v)
		return nil
	case messagesend.FieldMsgFeature:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgFeature(v)
		return nil
	case messagesend.FieldMsgStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgStatus(v)
		return nil
	case messagesend.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case messagesend.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MessageSend field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageSendMutation) AddedFields() []string {
	var fields []string
	if m.addmsg_id != nil {
		fields = append(fields, messagesend.FieldMsgID)
	}
	if m.addfrom_id != nil {
		fields = append(fields, messagesend.FieldFromID)
	}
	if m.addto_id != nil {
		fields = append(fields, messagesend.FieldToID)
	}
	if m.addgroup_id != nil {
		fields = append(fields, messagesend.FieldGroupID)
	}
	if m.addmsg_type != nil {
		fields = append(fields, messagesend.FieldMsgType)
	}
	if m.addmsg_res_code != nil {
		fields = append(fields, messagesend.FieldMsgResCode)
	}
	if m.addmsg_feature != nil {
		fields = append(fields, messagesend.FieldMsgFeature)
	}
	if m.addmsg_status != nil {
		fields = append(fields, messagesend.FieldMsgStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageSendMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messagesend.FieldMsgID:
		return m.AddedMsgID()
	case messagesend.FieldFromID:
		return m.AddedFromID()
	case messagesend.FieldToID:
		return m.AddedToID()
	case messagesend.FieldGroupID:
		return m.AddedGroupID()
	case messagesend.FieldMsgType:
		return m.AddedMsgType()
	case messagesend.FieldMsgResCode:
		return m.AddedMsgResCode()
	case messagesend.FieldMsgFeature:
		return m.AddedMsgFeature()
	case messagesend.FieldMsgStatus:
		return m.AddedMsgStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageSendMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messagesend.FieldMsgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgID(v)
		return nil
	case messagesend.FieldFromID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromID(v)
		return nil
	case messagesend.FieldToID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToID(v)
		return nil
	case messagesend.FieldGroupID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupID(v)
		return nil
	case messagesend.FieldMsgType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgType(v)
		return nil
	case messagesend.FieldMsgResCode:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgResCode(v)
		return nil
	case messagesend.FieldMsgFeature:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgFeature(v)
		return nil
	case messagesend.FieldMsgStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgStatus(v)
		return nil
	}
	return fmt.Errorf("unknown MessageSend numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageSendMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageSendMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageSendMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageSend nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageSendMutation) ResetField(name string) error {
	switch name {
	case messagesend.FieldMsgID:
		m.ResetMsgID()
		return nil
	case messagesend.FieldClientMsgID:
		m.ResetClientMsgID()
		return nil
	case messagesend.FieldFromID:
		m.ResetFromID()
		return nil
	case messagesend.FieldToID:
		m.ResetToID()
		return nil
	case messagesend.FieldGroupID:
		m.ResetGroupID()
		return nil
	case messagesend.FieldMsgType:
		m.ResetMsgType()
		return nil
	case messagesend.FieldMsgContent:
		m.ResetMsgContent()
		return nil
	case messagesend.FieldMsgResCode:
		m.ResetMsgResCode()
		return nil
	case messagesend.FieldMsgFeature:
		m.ResetMsgFeature()
		return nil
	case messagesend.FieldMsgStatus:
		m.ResetMsgStatus()
		return nil
	case messagesend.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case messagesend.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MessageSend field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageSendMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageSendMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageSendMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageSendMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageSendMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageSendMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageSendMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageSend unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageSendMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageSend edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	update_time       *time.Time
	user_id           *int64
	adduser_id        *int64
	peer_id           *int64
	addpeer_id        *int64
	session_type      *int
	addsession_type   *int
	session_status    *int
	addsession_status *int
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Session, error)
	predicates        []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *SessionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SessionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SessionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SessionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SessionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SessionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUserID sets the "user_id" field.
func (m *SessionMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SessionMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *SessionMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *SessionMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SessionMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetPeerID sets the "peer_id" field.
func (m *SessionMutation) SetPeerID(i int64) {
	m.peer_id = &i
	m.addpeer_id = nil
}

// PeerID returns the value of the "peer_id" field in the mutation.
func (m *SessionMutation) PeerID() (r int64, exists bool) {
	v := m.peer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerID returns the old "peer_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldPeerID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerID: %w", err)
	}
	return oldValue.PeerID, nil
}

// AddPeerID adds i to the "peer_id" field.
func (m *SessionMutation) AddPeerID(i int64) {
	if m.addpeer_id != nil {
		*m.addpeer_id += i
	} else {
		m.addpeer_id = &i
	}
}

// AddedPeerID returns the value that was added to the "peer_id" field in this mutation.
func (m *SessionMutation) AddedPeerID() (r int64, exists bool) {
	v := m.addpeer_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPeerID resets all changes to the "peer_id" field.
func (m *SessionMutation) ResetPeerID() {
	m.peer_id = nil
	m.addpeer_id = nil
}

// SetSessionType sets the "session_type" field.
func (m *SessionMutation) SetSessionType(i int) {
	m.session_type = &i
	m.addsession_type = nil
}

// SessionType returns the value of the "session_type" field in the mutation.
func (m *SessionMutation) SessionType() (r int, exists bool) {
	v := m.session_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionType returns the old "session_type" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionType: %w", err)
	}
	return oldValue.SessionType, nil
}

// AddSessionType adds i to the "session_type" field.
func (m *SessionMutation) AddSessionType(i int) {
	if m.addsession_type != nil {
		*m.addsession_type += i
	} else {
		m.addsession_type = &i
	}
}

// AddedSessionType returns the value that was added to the "session_type" field in this mutation.
func (m *SessionMutation) AddedSessionType() (r int, exists bool) {
	v := m.addsession_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionType resets all changes to the "session_type" field.
func (m *SessionMutation) ResetSessionType() {
	m.session_type = nil
	m.addsession_type = nil
}

// SetSessionStatus sets the "session_status" field.
func (m *SessionMutation) SetSessionStatus(i int) {
	m.session_status = &i
	m.addsession_status = nil
}

// SessionStatus returns the value of the "session_status" field in the mutation.
func (m *SessionMutation) SessionStatus() (r int, exists bool) {
	v := m.session_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionStatus returns the old "session_status" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionStatus: %w", err)
	}
	return oldValue.SessionStatus, nil
}

// AddSessionStatus adds i to the "session_status" field.
func (m *SessionMutation) AddSessionStatus(i int) {
	if m.addsession_status != nil {
		*m.addsession_status += i
	} else {
		m.addsession_status = &i
	}
}

// AddedSessionStatus returns the value that was added to the "session_status" field in this mutation.
func (m *SessionMutation) AddedSessionStatus() (r int, exists bool) {
	v := m.addsession_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionStatus resets all changes to the "session_status" field.
func (m *SessionMutation) ResetSessionStatus() {
	m.session_status = nil
	m.addsession_status = nil
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, session.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, session.FieldUpdateTime)
	}
	if m.user_id != nil {
		fields = append(fields, session.FieldUserID)
	}
	if m.peer_id != nil {
		fields = append(fields, session.FieldPeerID)
	}
	if m.session_type != nil {
		fields = append(fields, session.FieldSessionType)
	}
	if m.session_status != nil {
		fields = append(fields, session.FieldSessionStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldCreateTime:
		return m.CreateTime()
	case session.FieldUpdateTime:
		return m.UpdateTime()
	case session.FieldUserID:
		return m.UserID()
	case session.FieldPeerID:
		return m.PeerID()
	case session.FieldSessionType:
		return m.SessionType()
	case session.FieldSessionStatus:
		return m.SessionStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case session.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case session.FieldUserID:
		return m.OldUserID(ctx)
	case session.FieldPeerID:
		return m.OldPeerID(ctx)
	case session.FieldSessionType:
		return m.OldSessionType(ctx)
	case session.FieldSessionStatus:
		return m.OldSessionStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case session.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case session.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case session.FieldPeerID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerID(v)
		return nil
	case session.FieldSessionType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionType(v)
		return nil
	case session.FieldSessionStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, session.FieldUserID)
	}
	if m.addpeer_id != nil {
		fields = append(fields, session.FieldPeerID)
	}
	if m.addsession_type != nil {
		fields = append(fields, session.FieldSessionType)
	}
	if m.addsession_status != nil {
		fields = append(fields, session.FieldSessionStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case session.FieldUserID:
		return m.AddedUserID()
	case session.FieldPeerID:
		return m.AddedPeerID()
	case session.FieldSessionType:
		return m.AddedSessionType()
	case session.FieldSessionStatus:
		return m.AddedSessionStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case session.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case session.FieldPeerID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPeerID(v)
		return nil
	case session.FieldSessionType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionType(v)
		return nil
	case session.FieldSessionStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case session.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case session.FieldUserID:
		m.ResetUserID()
		return nil
	case session.FieldPeerID:
		m.ResetPeerID()
		return nil
	case session.FieldSessionType:
		m.ResetSessionType()
		return nil
	case session.FieldSessionStatus:
		m.ResetSessionStatus()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Session edge %s", name)
}
