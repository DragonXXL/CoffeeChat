// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CoffeeChat/internal/chat/data/ent/messagesend"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MessageSend is the model entity for the MessageSend schema.
type MessageSend struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MsgID holds the value of the "msg_id" field.
	MsgID int64 `json:"msg_id,omitempty"`
	// ClientMsgID holds the value of the "client_msg_id" field.
	ClientMsgID string `json:"client_msg_id,omitempty"`
	// FromID holds the value of the "from_id" field.
	FromID int64 `json:"from_id,omitempty"`
	// ToID holds the value of the "to_id" field.
	ToID int64 `json:"to_id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int64 `json:"group_id,omitempty"`
	// MsgType holds the value of the "msg_type" field.
	MsgType int `json:"msg_type,omitempty"`
	// MsgContent holds the value of the "msg_content" field.
	MsgContent string `json:"msg_content,omitempty"`
	// MsgResCode holds the value of the "msg_res_code" field.
	MsgResCode int16 `json:"msg_res_code,omitempty"`
	// MsgFeature holds the value of the "msg_feature" field.
	MsgFeature int16 `json:"msg_feature,omitempty"`
	// MsgStatus holds the value of the "msg_status" field.
	MsgStatus int16 `json:"msg_status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageSend) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagesend.FieldID, messagesend.FieldMsgID, messagesend.FieldFromID, messagesend.FieldToID, messagesend.FieldGroupID, messagesend.FieldMsgType, messagesend.FieldMsgResCode, messagesend.FieldMsgFeature, messagesend.FieldMsgStatus:
			values[i] = new(sql.NullInt64)
		case messagesend.FieldClientMsgID, messagesend.FieldMsgContent:
			values[i] = new(sql.NullString)
		case messagesend.FieldCreatedAt, messagesend.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MessageSend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageSend fields.
func (ms *MessageSend) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagesend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case messagesend.FieldMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_id", values[i])
			} else if value.Valid {
				ms.MsgID = value.Int64
			}
		case messagesend.FieldClientMsgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_msg_id", values[i])
			} else if value.Valid {
				ms.ClientMsgID = value.String
			}
		case messagesend.FieldFromID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_id", values[i])
			} else if value.Valid {
				ms.FromID = value.Int64
			}
		case messagesend.FieldToID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_id", values[i])
			} else if value.Valid {
				ms.ToID = value.Int64
			}
		case messagesend.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				ms.GroupID = value.Int64
			}
		case messagesend.FieldMsgType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_type", values[i])
			} else if value.Valid {
				ms.MsgType = int(value.Int64)
			}
		case messagesend.FieldMsgContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msg_content", values[i])
			} else if value.Valid {
				ms.MsgContent = value.String
			}
		case messagesend.FieldMsgResCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_res_code", values[i])
			} else if value.Valid {
				ms.MsgResCode = int16(value.Int64)
			}
		case messagesend.FieldMsgFeature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_feature", values[i])
			} else if value.Valid {
				ms.MsgFeature = int16(value.Int64)
			}
		case messagesend.FieldMsgStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_status", values[i])
			} else if value.Valid {
				ms.MsgStatus = int16(value.Int64)
			}
		case messagesend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ms.CreatedAt = value.Time
			}
		case messagesend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MessageSend.
// Note that you need to call MessageSend.Unwrap() before calling this method if this MessageSend
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MessageSend) Update() *MessageSendUpdateOne {
	return (&MessageSendClient{config: ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the MessageSend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MessageSend) Unwrap() *MessageSend {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageSend is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MessageSend) String() string {
	var builder strings.Builder
	builder.WriteString("MessageSend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("msg_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.MsgID))
	builder.WriteString(", ")
	builder.WriteString("client_msg_id=")
	builder.WriteString(ms.ClientMsgID)
	builder.WriteString(", ")
	builder.WriteString("from_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.FromID))
	builder.WriteString(", ")
	builder.WriteString("to_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.ToID))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.GroupID))
	builder.WriteString(", ")
	builder.WriteString("msg_type=")
	builder.WriteString(fmt.Sprintf("%v", ms.MsgType))
	builder.WriteString(", ")
	builder.WriteString("msg_content=")
	builder.WriteString(ms.MsgContent)
	builder.WriteString(", ")
	builder.WriteString("msg_res_code=")
	builder.WriteString(fmt.Sprintf("%v", ms.MsgResCode))
	builder.WriteString(", ")
	builder.WriteString("msg_feature=")
	builder.WriteString(fmt.Sprintf("%v", ms.MsgFeature))
	builder.WriteString(", ")
	builder.WriteString("msg_status=")
	builder.WriteString(fmt.Sprintf("%v", ms.MsgStatus))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessageSends is a parsable slice of MessageSend.
type MessageSends []*MessageSend

func (ms MessageSends) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
