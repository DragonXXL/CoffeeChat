// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CoffeeChat/internal/chat/data/ent/messagerecv"
	"CoffeeChat/internal/chat/data/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageRecvQuery is the builder for querying MessageRecv entities.
type MessageRecvQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MessageRecv
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MessageRecvQuery builder.
func (mrq *MessageRecvQuery) Where(ps ...predicate.MessageRecv) *MessageRecvQuery {
	mrq.predicates = append(mrq.predicates, ps...)
	return mrq
}

// Limit adds a limit step to the query.
func (mrq *MessageRecvQuery) Limit(limit int) *MessageRecvQuery {
	mrq.limit = &limit
	return mrq
}

// Offset adds an offset step to the query.
func (mrq *MessageRecvQuery) Offset(offset int) *MessageRecvQuery {
	mrq.offset = &offset
	return mrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mrq *MessageRecvQuery) Unique(unique bool) *MessageRecvQuery {
	mrq.unique = &unique
	return mrq
}

// Order adds an order step to the query.
func (mrq *MessageRecvQuery) Order(o ...OrderFunc) *MessageRecvQuery {
	mrq.order = append(mrq.order, o...)
	return mrq
}

// First returns the first MessageRecv entity from the query.
// Returns a *NotFoundError when no MessageRecv was found.
func (mrq *MessageRecvQuery) First(ctx context.Context) (*MessageRecv, error) {
	nodes, err := mrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{messagerecv.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mrq *MessageRecvQuery) FirstX(ctx context.Context) *MessageRecv {
	node, err := mrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MessageRecv ID from the query.
// Returns a *NotFoundError when no MessageRecv ID was found.
func (mrq *MessageRecvQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{messagerecv.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mrq *MessageRecvQuery) FirstIDX(ctx context.Context) int {
	id, err := mrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MessageRecv entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MessageRecv entity is found.
// Returns a *NotFoundError when no MessageRecv entities are found.
func (mrq *MessageRecvQuery) Only(ctx context.Context) (*MessageRecv, error) {
	nodes, err := mrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{messagerecv.Label}
	default:
		return nil, &NotSingularError{messagerecv.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mrq *MessageRecvQuery) OnlyX(ctx context.Context) *MessageRecv {
	node, err := mrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MessageRecv ID in the query.
// Returns a *NotSingularError when more than one MessageRecv ID is found.
// Returns a *NotFoundError when no entities are found.
func (mrq *MessageRecvQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{messagerecv.Label}
	default:
		err = &NotSingularError{messagerecv.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mrq *MessageRecvQuery) OnlyIDX(ctx context.Context) int {
	id, err := mrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MessageRecvs.
func (mrq *MessageRecvQuery) All(ctx context.Context) ([]*MessageRecv, error) {
	if err := mrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mrq *MessageRecvQuery) AllX(ctx context.Context) []*MessageRecv {
	nodes, err := mrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MessageRecv IDs.
func (mrq *MessageRecvQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mrq.Select(messagerecv.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mrq *MessageRecvQuery) IDsX(ctx context.Context) []int {
	ids, err := mrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mrq *MessageRecvQuery) Count(ctx context.Context) (int, error) {
	if err := mrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mrq *MessageRecvQuery) CountX(ctx context.Context) int {
	count, err := mrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mrq *MessageRecvQuery) Exist(ctx context.Context) (bool, error) {
	if err := mrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mrq *MessageRecvQuery) ExistX(ctx context.Context) bool {
	exist, err := mrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MessageRecvQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mrq *MessageRecvQuery) Clone() *MessageRecvQuery {
	if mrq == nil {
		return nil
	}
	return &MessageRecvQuery{
		config:     mrq.config,
		limit:      mrq.limit,
		offset:     mrq.offset,
		order:      append([]OrderFunc{}, mrq.order...),
		predicates: append([]predicate.MessageRecv{}, mrq.predicates...),
		// clone intermediate query.
		sql:    mrq.sql.Clone(),
		path:   mrq.path,
		unique: mrq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		MsgID int64 `json:"msg_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MessageRecv.Query().
//		GroupBy(messagerecv.FieldMsgID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mrq *MessageRecvQuery) GroupBy(field string, fields ...string) *MessageRecvGroupBy {
	grbuild := &MessageRecvGroupBy{config: mrq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mrq.sqlQuery(ctx), nil
	}
	grbuild.label = messagerecv.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		MsgID int64 `json:"msg_id,omitempty"`
//	}
//
//	client.MessageRecv.Query().
//		Select(messagerecv.FieldMsgID).
//		Scan(ctx, &v)
//
func (mrq *MessageRecvQuery) Select(fields ...string) *MessageRecvSelect {
	mrq.fields = append(mrq.fields, fields...)
	selbuild := &MessageRecvSelect{MessageRecvQuery: mrq}
	selbuild.label = messagerecv.Label
	selbuild.flds, selbuild.scan = &mrq.fields, selbuild.Scan
	return selbuild
}

func (mrq *MessageRecvQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mrq.fields {
		if !messagerecv.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mrq.path != nil {
		prev, err := mrq.path(ctx)
		if err != nil {
			return err
		}
		mrq.sql = prev
	}
	return nil
}

func (mrq *MessageRecvQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MessageRecv, error) {
	var (
		nodes = []*MessageRecv{}
		_spec = mrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*MessageRecv).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &MessageRecv{config: mrq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mrq *MessageRecvQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mrq.querySpec()
	_spec.Node.Columns = mrq.fields
	if len(mrq.fields) > 0 {
		_spec.Unique = mrq.unique != nil && *mrq.unique
	}
	return sqlgraph.CountNodes(ctx, mrq.driver, _spec)
}

func (mrq *MessageRecvQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mrq *MessageRecvQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagerecv.Table,
			Columns: messagerecv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagerecv.FieldID,
			},
		},
		From:   mrq.sql,
		Unique: true,
	}
	if unique := mrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagerecv.FieldID)
		for i := range fields {
			if fields[i] != messagerecv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mrq *MessageRecvQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mrq.driver.Dialect())
	t1 := builder.Table(messagerecv.Table)
	columns := mrq.fields
	if len(columns) == 0 {
		columns = messagerecv.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mrq.sql != nil {
		selector = mrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mrq.unique != nil && *mrq.unique {
		selector.Distinct()
	}
	for _, p := range mrq.predicates {
		p(selector)
	}
	for _, p := range mrq.order {
		p(selector)
	}
	if offset := mrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MessageRecvGroupBy is the group-by builder for MessageRecv entities.
type MessageRecvGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mrgb *MessageRecvGroupBy) Aggregate(fns ...AggregateFunc) *MessageRecvGroupBy {
	mrgb.fns = append(mrgb.fns, fns...)
	return mrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mrgb *MessageRecvGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mrgb.path(ctx)
	if err != nil {
		return err
	}
	mrgb.sql = query
	return mrgb.sqlScan(ctx, v)
}

func (mrgb *MessageRecvGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mrgb.fields {
		if !messagerecv.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mrgb *MessageRecvGroupBy) sqlQuery() *sql.Selector {
	selector := mrgb.sql.Select()
	aggregation := make([]string, 0, len(mrgb.fns))
	for _, fn := range mrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mrgb.fields)+len(mrgb.fns))
		for _, f := range mrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mrgb.fields...)...)
}

// MessageRecvSelect is the builder for selecting fields of MessageRecv entities.
type MessageRecvSelect struct {
	*MessageRecvQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mrs *MessageRecvSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mrs.prepareQuery(ctx); err != nil {
		return err
	}
	mrs.sql = mrs.MessageRecvQuery.sqlQuery(ctx)
	return mrs.sqlScan(ctx, v)
}

func (mrs *MessageRecvSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mrs.sql.Query()
	if err := mrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
