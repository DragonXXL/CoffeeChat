// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	user "user/api/user"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationApiUserAuth = "/apigw.v1.ApiUser/Auth"
const OperationApiUserRegister = "/apigw.v1.ApiUser/Register"

type ApiUserHTTPServer interface {
	Auth(context.Context, *user.AuthRequest) (*user.AuthReply, error)
	Register(context.Context, *user.RegisterRequest) (*user.RegisterReply, error)
}

func RegisterApiUserHTTPServer(s *http.Server, srv ApiUserHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/device/register", _ApiUser_Register0_HTTP_Handler(srv))
	r.POST("/auth/login", _ApiUser_Auth0_HTTP_Handler(srv))
}

func _ApiUser_Register0_HTTP_Handler(srv ApiUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in user.RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUserRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*user.RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*user.RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _ApiUser_Auth0_HTTP_Handler(srv ApiUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in user.AuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUserAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Auth(ctx, req.(*user.AuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*user.AuthReply)
		return ctx.Result(200, reply)
	}
}

type ApiUserHTTPClient interface {
	Auth(ctx context.Context, req *user.AuthRequest, opts ...http.CallOption) (rsp *user.AuthReply, err error)
	Register(ctx context.Context, req *user.RegisterRequest, opts ...http.CallOption) (rsp *user.RegisterReply, err error)
}

type ApiUserHTTPClientImpl struct {
	cc *http.Client
}

func NewApiUserHTTPClient(client *http.Client) ApiUserHTTPClient {
	return &ApiUserHTTPClientImpl{client}
}

func (c *ApiUserHTTPClientImpl) Auth(ctx context.Context, in *user.AuthRequest, opts ...http.CallOption) (*user.AuthReply, error) {
	var out user.AuthReply
	pattern := "/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUserAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiUserHTTPClientImpl) Register(ctx context.Context, in *user.RegisterRequest, opts ...http.CallOption) (*user.RegisterReply, error) {
	var out user.RegisterReply
	pattern := "/auth/device/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUserRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
