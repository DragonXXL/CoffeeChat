// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package chat

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatGetMsgList = "/coffeechat.Chat/GetMsgList"
const OperationChatMsgReadAck = "/coffeechat.Chat/MsgReadAck"
const OperationChatRecentContactSession = "/coffeechat.Chat/RecentContactSession"
const OperationChatSend = "/coffeechat.Chat/Send"

type ChatHTTPServer interface {
	GetMsgList(context.Context, *CIMGetMsgListReq) (*CIMGetMsgListRsp, error)
	MsgReadAck(context.Context, *CIMMsgDataReadReq) (*CIMMsgDataReadRsp, error)
	RecentContactSession(context.Context, *CIMRecentContactSessionReq) (*CIMRecentContactSessionRsp, error)
	Send(context.Context, *CIMMsgData) (*CIMMsgDataAck, error)
}

func RegisterChatHTTPServer(s *http.Server, srv ChatHTTPServer) {
	r := s.Route("/")
	r.GET("/chat/sessions", _Chat_RecentContactSession0_HTTP_Handler(srv))
	r.GET("/chat/messages", _Chat_GetMsgList0_HTTP_Handler(srv))
	r.POST("/chat/send", _Chat_Send0_HTTP_Handler(srv))
	r.POST("/chat/readMsg", _Chat_MsgReadAck0_HTTP_Handler(srv))
}

func _Chat_RecentContactSession0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CIMRecentContactSessionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatRecentContactSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecentContactSession(ctx, req.(*CIMRecentContactSessionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CIMRecentContactSessionRsp)
		return ctx.Result(200, reply)
	}
}

func _Chat_GetMsgList0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CIMGetMsgListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatGetMsgList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMsgList(ctx, req.(*CIMGetMsgListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CIMGetMsgListRsp)
		return ctx.Result(200, reply)
	}
}

func _Chat_Send0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CIMMsgData
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatSend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Send(ctx, req.(*CIMMsgData))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CIMMsgDataAck)
		return ctx.Result(200, reply)
	}
}

func _Chat_MsgReadAck0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CIMMsgDataReadReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatMsgReadAck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MsgReadAck(ctx, req.(*CIMMsgDataReadReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CIMMsgDataReadRsp)
		return ctx.Result(200, reply)
	}
}

type ChatHTTPClient interface {
	GetMsgList(ctx context.Context, req *CIMGetMsgListReq, opts ...http.CallOption) (rsp *CIMGetMsgListRsp, err error)
	MsgReadAck(ctx context.Context, req *CIMMsgDataReadReq, opts ...http.CallOption) (rsp *CIMMsgDataReadRsp, err error)
	RecentContactSession(ctx context.Context, req *CIMRecentContactSessionReq, opts ...http.CallOption) (rsp *CIMRecentContactSessionRsp, err error)
	Send(ctx context.Context, req *CIMMsgData, opts ...http.CallOption) (rsp *CIMMsgDataAck, err error)
}

type ChatHTTPClientImpl struct {
	cc *http.Client
}

func NewChatHTTPClient(client *http.Client) ChatHTTPClient {
	return &ChatHTTPClientImpl{client}
}

func (c *ChatHTTPClientImpl) GetMsgList(ctx context.Context, in *CIMGetMsgListReq, opts ...http.CallOption) (*CIMGetMsgListRsp, error) {
	var out CIMGetMsgListRsp
	pattern := "/chat/messages"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatGetMsgList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) MsgReadAck(ctx context.Context, in *CIMMsgDataReadReq, opts ...http.CallOption) (*CIMMsgDataReadRsp, error) {
	var out CIMMsgDataReadRsp
	pattern := "/chat/readMsg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatMsgReadAck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) RecentContactSession(ctx context.Context, in *CIMRecentContactSessionReq, opts ...http.CallOption) (*CIMRecentContactSessionRsp, error) {
	var out CIMRecentContactSessionRsp
	pattern := "/chat/sessions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatRecentContactSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) Send(ctx context.Context, in *CIMMsgData, opts ...http.CallOption) (*CIMMsgDataAck, error) {
	var out CIMMsgDataAck
	pattern := "/chat/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatSend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
