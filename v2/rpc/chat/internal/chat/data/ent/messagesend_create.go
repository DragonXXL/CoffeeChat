// Code generated by ent, DO NOT EDIT.

package ent

import (
	"CoffeeChat/internal/chat/data/ent/messagesend"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageSendCreate is the builder for creating a MessageSend entity.
type MessageSendCreate struct {
	config
	mutation *MessageSendMutation
	hooks    []Hook
}

// SetMsgID sets the "msg_id" field.
func (msc *MessageSendCreate) SetMsgID(i int64) *MessageSendCreate {
	msc.mutation.SetMsgID(i)
	return msc
}

// SetClientMsgID sets the "client_msg_id" field.
func (msc *MessageSendCreate) SetClientMsgID(s string) *MessageSendCreate {
	msc.mutation.SetClientMsgID(s)
	return msc
}

// SetFromID sets the "from_id" field.
func (msc *MessageSendCreate) SetFromID(i int64) *MessageSendCreate {
	msc.mutation.SetFromID(i)
	return msc
}

// SetToID sets the "to_id" field.
func (msc *MessageSendCreate) SetToID(i int64) *MessageSendCreate {
	msc.mutation.SetToID(i)
	return msc
}

// SetGroupID sets the "group_id" field.
func (msc *MessageSendCreate) SetGroupID(i int64) *MessageSendCreate {
	msc.mutation.SetGroupID(i)
	return msc
}

// SetMsgType sets the "msg_type" field.
func (msc *MessageSendCreate) SetMsgType(i int) *MessageSendCreate {
	msc.mutation.SetMsgType(i)
	return msc
}

// SetMsgContent sets the "msg_content" field.
func (msc *MessageSendCreate) SetMsgContent(s string) *MessageSendCreate {
	msc.mutation.SetMsgContent(s)
	return msc
}

// SetMsgResCode sets the "msg_res_code" field.
func (msc *MessageSendCreate) SetMsgResCode(i int16) *MessageSendCreate {
	msc.mutation.SetMsgResCode(i)
	return msc
}

// SetMsgFeature sets the "msg_feature" field.
func (msc *MessageSendCreate) SetMsgFeature(i int16) *MessageSendCreate {
	msc.mutation.SetMsgFeature(i)
	return msc
}

// SetMsgStatus sets the "msg_status" field.
func (msc *MessageSendCreate) SetMsgStatus(i int16) *MessageSendCreate {
	msc.mutation.SetMsgStatus(i)
	return msc
}

// SetCreatedAt sets the "created_at" field.
func (msc *MessageSendCreate) SetCreatedAt(t time.Time) *MessageSendCreate {
	msc.mutation.SetCreatedAt(t)
	return msc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msc *MessageSendCreate) SetNillableCreatedAt(t *time.Time) *MessageSendCreate {
	if t != nil {
		msc.SetCreatedAt(*t)
	}
	return msc
}

// SetUpdatedAt sets the "updated_at" field.
func (msc *MessageSendCreate) SetUpdatedAt(t time.Time) *MessageSendCreate {
	msc.mutation.SetUpdatedAt(t)
	return msc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msc *MessageSendCreate) SetNillableUpdatedAt(t *time.Time) *MessageSendCreate {
	if t != nil {
		msc.SetUpdatedAt(*t)
	}
	return msc
}

// SetID sets the "id" field.
func (msc *MessageSendCreate) SetID(i int) *MessageSendCreate {
	msc.mutation.SetID(i)
	return msc
}

// Mutation returns the MessageSendMutation object of the builder.
func (msc *MessageSendCreate) Mutation() *MessageSendMutation {
	return msc.mutation
}

// Save creates the MessageSend in the database.
func (msc *MessageSendCreate) Save(ctx context.Context) (*MessageSend, error) {
	var (
		err  error
		node *MessageSend
	)
	msc.defaults()
	if len(msc.hooks) == 0 {
		if err = msc.check(); err != nil {
			return nil, err
		}
		node, err = msc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageSendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msc.check(); err != nil {
				return nil, err
			}
			msc.mutation = mutation
			if node, err = msc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(msc.hooks) - 1; i >= 0; i-- {
			if msc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, msc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MessageSend)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageSendMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MessageSendCreate) SaveX(ctx context.Context) *MessageSend {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MessageSendCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MessageSendCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MessageSendCreate) defaults() {
	if _, ok := msc.mutation.CreatedAt(); !ok {
		v := messagesend.DefaultCreatedAt
		msc.mutation.SetCreatedAt(v)
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		v := messagesend.DefaultUpdatedAt
		msc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MessageSendCreate) check() error {
	if _, ok := msc.mutation.MsgID(); !ok {
		return &ValidationError{Name: "msg_id", err: errors.New(`ent: missing required field "MessageSend.msg_id"`)}
	}
	if _, ok := msc.mutation.ClientMsgID(); !ok {
		return &ValidationError{Name: "client_msg_id", err: errors.New(`ent: missing required field "MessageSend.client_msg_id"`)}
	}
	if _, ok := msc.mutation.FromID(); !ok {
		return &ValidationError{Name: "from_id", err: errors.New(`ent: missing required field "MessageSend.from_id"`)}
	}
	if _, ok := msc.mutation.ToID(); !ok {
		return &ValidationError{Name: "to_id", err: errors.New(`ent: missing required field "MessageSend.to_id"`)}
	}
	if _, ok := msc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "MessageSend.group_id"`)}
	}
	if _, ok := msc.mutation.MsgType(); !ok {
		return &ValidationError{Name: "msg_type", err: errors.New(`ent: missing required field "MessageSend.msg_type"`)}
	}
	if _, ok := msc.mutation.MsgContent(); !ok {
		return &ValidationError{Name: "msg_content", err: errors.New(`ent: missing required field "MessageSend.msg_content"`)}
	}
	if _, ok := msc.mutation.MsgResCode(); !ok {
		return &ValidationError{Name: "msg_res_code", err: errors.New(`ent: missing required field "MessageSend.msg_res_code"`)}
	}
	if _, ok := msc.mutation.MsgFeature(); !ok {
		return &ValidationError{Name: "msg_feature", err: errors.New(`ent: missing required field "MessageSend.msg_feature"`)}
	}
	if _, ok := msc.mutation.MsgStatus(); !ok {
		return &ValidationError{Name: "msg_status", err: errors.New(`ent: missing required field "MessageSend.msg_status"`)}
	}
	if _, ok := msc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MessageSend.created_at"`)}
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MessageSend.updated_at"`)}
	}
	return nil
}

func (msc *MessageSendCreate) sqlSave(ctx context.Context) (*MessageSend, error) {
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (msc *MessageSendCreate) createSpec() (*MessageSend, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageSend{config: msc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: messagesend.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagesend.FieldID,
			},
		}
	)
	if id, ok := msc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := msc.mutation.MsgID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldMsgID,
		})
		_node.MsgID = value
	}
	if value, ok := msc.mutation.ClientMsgID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagesend.FieldClientMsgID,
		})
		_node.ClientMsgID = value
	}
	if value, ok := msc.mutation.FromID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldFromID,
		})
		_node.FromID = value
	}
	if value, ok := msc.mutation.ToID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldToID,
		})
		_node.ToID = value
	}
	if value, ok := msc.mutation.GroupID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: messagesend.FieldGroupID,
		})
		_node.GroupID = value
	}
	if value, ok := msc.mutation.MsgType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messagesend.FieldMsgType,
		})
		_node.MsgType = value
	}
	if value, ok := msc.mutation.MsgContent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagesend.FieldMsgContent,
		})
		_node.MsgContent = value
	}
	if value, ok := msc.mutation.MsgResCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgResCode,
		})
		_node.MsgResCode = value
	}
	if value, ok := msc.mutation.MsgFeature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgFeature,
		})
		_node.MsgFeature = value
	}
	if value, ok := msc.mutation.MsgStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: messagesend.FieldMsgStatus,
		})
		_node.MsgStatus = value
	}
	if value, ok := msc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagesend.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := msc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messagesend.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MessageSendCreateBulk is the builder for creating many MessageSend entities in bulk.
type MessageSendCreateBulk struct {
	config
	builders []*MessageSendCreate
}

// Save creates the MessageSend entities in the database.
func (mscb *MessageSendCreateBulk) Save(ctx context.Context) ([]*MessageSend, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MessageSend, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageSendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MessageSendCreateBulk) SaveX(ctx context.Context) []*MessageSend {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MessageSendCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MessageSendCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
