// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: app/rpc/chat/api/chat/message.proto

package chat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 会话信息
type CIMContactSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     uint64               `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                  // 会话id
	SessionType   CIMSessionType       `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3,enum=coffeechat.CIMSessionType" json:"session_type,omitempty"`             // 会话类型
	SessionStatus CIMSessionStatusType `protobuf:"varint,3,opt,name=session_status,json=sessionStatus,proto3,enum=coffeechat.CIMSessionStatusType" json:"session_status,omitempty"` // 会话修改命令，预留
	UnreadCnt     uint32               `protobuf:"varint,4,opt,name=unread_cnt,json=unreadCnt,proto3" json:"unread_cnt,omitempty"`                                                  // 该会话未读消息数量
	UpdatedTime   uint32               `protobuf:"varint,5,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`                                            // 更新时间
	MsgId         string               `protobuf:"bytes,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                                               // 最新一条消息的id（UUID）
	ServerMsgId   uint64               `protobuf:"varint,7,opt,name=server_msg_id,json=serverMsgId,proto3" json:"server_msg_id,omitempty"`                                          // 最新一条消息服务端的id（顺序递增）
	MsgTimeStamp  uint32               `protobuf:"varint,8,opt,name=msg_time_stamp,json=msgTimeStamp,proto3" json:"msg_time_stamp,omitempty"`                                       // 最新一条消息时间戳（毫秒）
	MsgData       []byte               `protobuf:"bytes,9,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                                                         // 最新一条消息的内容
	MsgType       CIMMsgType           `protobuf:"varint,10,opt,name=msg_type,json=msgType,proto3,enum=coffeechat.CIMMsgType" json:"msg_type,omitempty"`                            // 最新一条消息的类型
	MsgFromUserId uint64               `protobuf:"varint,11,opt,name=msg_from_user_id,json=msgFromUserId,proto3" json:"msg_from_user_id,omitempty"`                                 // 最新一条消息的发送者
	MsgStatus     CIMMsgStatus         `protobuf:"varint,12,opt,name=msg_status,json=msgStatus,proto3,enum=coffeechat.CIMMsgStatus" json:"msg_status,omitempty"`                    // 最新一条消息的状态（预留）
	//optional
	MsgAttach string `protobuf:"bytes,13,opt,name=msg_attach,json=msgAttach,proto3" json:"msg_attach,omitempty"` // 最新一条消息的附件（预留）
	//optional
	ExtendData string `protobuf:"bytes,14,opt,name=extend_data,json=extendData,proto3" json:"extend_data,omitempty"` // 本地扩展字段（限制4096）
	//optional
	IsRobotSession bool `protobuf:"varint,15,opt,name=is_robot_session,json=isRobotSession,proto3" json:"is_robot_session,omitempty"` // 是否为机器人会话
}

func (x *CIMContactSessionInfo) Reset() {
	*x = CIMContactSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_rpc_chat_api_chat_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMContactSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMContactSessionInfo) ProtoMessage() {}

func (x *CIMContactSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_rpc_chat_api_chat_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMContactSessionInfo.ProtoReflect.Descriptor instead.
func (*CIMContactSessionInfo) Descriptor() ([]byte, []int) {
	return file_app_rpc_chat_api_chat_message_proto_rawDescGZIP(), []int{0}
}

func (x *CIMContactSessionInfo) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *CIMContactSessionInfo) GetSessionType() CIMSessionType {
	if x != nil {
		return x.SessionType
	}
	return CIMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *CIMContactSessionInfo) GetSessionStatus() CIMSessionStatusType {
	if x != nil {
		return x.SessionStatus
	}
	return CIMSessionStatusType_kCIM_SESSION_STATUS_UNKNOWN
}

func (x *CIMContactSessionInfo) GetUnreadCnt() uint32 {
	if x != nil {
		return x.UnreadCnt
	}
	return 0
}

func (x *CIMContactSessionInfo) GetUpdatedTime() uint32 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *CIMContactSessionInfo) GetServerMsgId() uint64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgTimeStamp() uint32 {
	if x != nil {
		return x.MsgTimeStamp
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *CIMContactSessionInfo) GetMsgType() CIMMsgType {
	if x != nil {
		return x.MsgType
	}
	return CIMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *CIMContactSessionInfo) GetMsgFromUserId() uint64 {
	if x != nil {
		return x.MsgFromUserId
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgStatus() CIMMsgStatus {
	if x != nil {
		return x.MsgStatus
	}
	return CIMMsgStatus_kCIM_MSG_STATUS_NONE
}

func (x *CIMContactSessionInfo) GetMsgAttach() string {
	if x != nil {
		return x.MsgAttach
	}
	return ""
}

func (x *CIMContactSessionInfo) GetExtendData() string {
	if x != nil {
		return x.ExtendData
	}
	return ""
}

func (x *CIMContactSessionInfo) GetIsRobotSession() bool {
	if x != nil {
		return x.IsRobotSession
	}
	return false
}

// 消息信息
type CIMMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId string         `protobuf:"bytes,1,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`                               // 客户端消息ID（UUID）
	ServerMsgId uint64         `protobuf:"varint,2,opt,name=server_msg_id,json=serverMsgId,proto3" json:"server_msg_id,omitempty"`                              // 服务端消息ID
	MsgResCode  CIMResCode     `protobuf:"varint,3,opt,name=msg_res_code,json=msgResCode,proto3,enum=coffeechat.CIMResCode" json:"msg_res_code,omitempty"`      // 消息错误码
	MsgFeature  CIMMsgFeature  `protobuf:"varint,4,opt,name=msg_feature,json=msgFeature,proto3,enum=coffeechat.CIMMsgFeature" json:"msg_feature,omitempty"`     // 消息属性
	SessionType CIMSessionType `protobuf:"varint,5,opt,name=session_type,json=sessionType,proto3,enum=coffeechat.CIMSessionType" json:"session_type,omitempty"` // 会话类型
	FromUserId  uint64         `protobuf:"varint,6,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`                                 // 来源会话ID
	ToSessionId uint64         `protobuf:"varint,7,opt,name=to_session_id,json=toSessionId,proto3" json:"to_session_id,omitempty"`                              // 目标会话ID
	CreateTime  uint32         `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                   // 消息创建时间戳（毫秒）
	MsgType     CIMMsgType     `protobuf:"varint,9,opt,name=msg_type,json=msgType,proto3,enum=coffeechat.CIMMsgType" json:"msg_type,omitempty"`                 // 消息类型
	MsgStatus   CIMMsgStatus   `protobuf:"varint,10,opt,name=msg_status,json=msgStatus,proto3,enum=coffeechat.CIMMsgStatus" json:"msg_status,omitempty"`        // 消息状态（预留）
	MsgData     []byte         `protobuf:"bytes,11,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                                            // 消息内容
	//optional
	Attach           string        `protobuf:"bytes,12,opt,name=attach,proto3" json:"attach,omitempty"`                                                                              // 消息附件（预留）
	SenderClientType CIMClientType `protobuf:"varint,13,opt,name=sender_client_type,json=senderClientType,proto3,enum=coffeechat.CIMClientType" json:"sender_client_type,omitempty"` // 发送者客户端类型
}

func (x *CIMMsgInfo) Reset() {
	*x = CIMMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_rpc_chat_api_chat_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMMsgInfo) ProtoMessage() {}

func (x *CIMMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_rpc_chat_api_chat_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMMsgInfo.ProtoReflect.Descriptor instead.
func (*CIMMsgInfo) Descriptor() ([]byte, []int) {
	return file_app_rpc_chat_api_chat_message_proto_rawDescGZIP(), []int{1}
}

func (x *CIMMsgInfo) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

func (x *CIMMsgInfo) GetServerMsgId() uint64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *CIMMsgInfo) GetMsgResCode() CIMResCode {
	if x != nil {
		return x.MsgResCode
	}
	return CIMResCode_kCIM_RES_CODE_UNKNOWN
}

func (x *CIMMsgInfo) GetMsgFeature() CIMMsgFeature {
	if x != nil {
		return x.MsgFeature
	}
	return CIMMsgFeature_kCIM_MSG_FEATURE_DEFAULT
}

func (x *CIMMsgInfo) GetSessionType() CIMSessionType {
	if x != nil {
		return x.SessionType
	}
	return CIMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *CIMMsgInfo) GetFromUserId() uint64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *CIMMsgInfo) GetToSessionId() uint64 {
	if x != nil {
		return x.ToSessionId
	}
	return 0
}

func (x *CIMMsgInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CIMMsgInfo) GetMsgType() CIMMsgType {
	if x != nil {
		return x.MsgType
	}
	return CIMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *CIMMsgInfo) GetMsgStatus() CIMMsgStatus {
	if x != nil {
		return x.MsgStatus
	}
	return CIMMsgStatus_kCIM_MSG_STATUS_NONE
}

func (x *CIMMsgInfo) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *CIMMsgInfo) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *CIMMsgInfo) GetSenderClientType() CIMClientType {
	if x != nil {
		return x.SenderClientType
	}
	return CIMClientType_kCIM_CLIENT_TYPE_DEFAULT
}

var File_app_rpc_chat_api_chat_message_proto protoreflect.FileDescriptor

var file_app_rpc_chat_api_chat_message_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x1a, 0x24, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x04, 0x0a, 0x15, 0x43, 0x49, 0x4d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x47, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x73, 0x67,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x73, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x73, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x04, 0x0a, 0x0a, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x49, 0x4d, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x43, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x33, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a, 0x18, 0x43, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x43, 0x68, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x3b, 0x63, 0x68, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_rpc_chat_api_chat_message_proto_rawDescOnce sync.Once
	file_app_rpc_chat_api_chat_message_proto_rawDescData = file_app_rpc_chat_api_chat_message_proto_rawDesc
)

func file_app_rpc_chat_api_chat_message_proto_rawDescGZIP() []byte {
	file_app_rpc_chat_api_chat_message_proto_rawDescOnce.Do(func() {
		file_app_rpc_chat_api_chat_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_rpc_chat_api_chat_message_proto_rawDescData)
	})
	return file_app_rpc_chat_api_chat_message_proto_rawDescData
}

var file_app_rpc_chat_api_chat_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_app_rpc_chat_api_chat_message_proto_goTypes = []interface{}{
	(*CIMContactSessionInfo)(nil), // 0: coffeechat.CIMContactSessionInfo
	(*CIMMsgInfo)(nil),            // 1: coffeechat.CIMMsgInfo
	(CIMSessionType)(0),           // 2: coffeechat.CIMSessionType
	(CIMSessionStatusType)(0),     // 3: coffeechat.CIMSessionStatusType
	(CIMMsgType)(0),               // 4: coffeechat.CIMMsgType
	(CIMMsgStatus)(0),             // 5: coffeechat.CIMMsgStatus
	(CIMResCode)(0),               // 6: coffeechat.CIMResCode
	(CIMMsgFeature)(0),            // 7: coffeechat.CIMMsgFeature
	(CIMClientType)(0),            // 8: coffeechat.CIMClientType
}
var file_app_rpc_chat_api_chat_message_proto_depIdxs = []int32{
	2,  // 0: coffeechat.CIMContactSessionInfo.session_type:type_name -> coffeechat.CIMSessionType
	3,  // 1: coffeechat.CIMContactSessionInfo.session_status:type_name -> coffeechat.CIMSessionStatusType
	4,  // 2: coffeechat.CIMContactSessionInfo.msg_type:type_name -> coffeechat.CIMMsgType
	5,  // 3: coffeechat.CIMContactSessionInfo.msg_status:type_name -> coffeechat.CIMMsgStatus
	6,  // 4: coffeechat.CIMMsgInfo.msg_res_code:type_name -> coffeechat.CIMResCode
	7,  // 5: coffeechat.CIMMsgInfo.msg_feature:type_name -> coffeechat.CIMMsgFeature
	2,  // 6: coffeechat.CIMMsgInfo.session_type:type_name -> coffeechat.CIMSessionType
	4,  // 7: coffeechat.CIMMsgInfo.msg_type:type_name -> coffeechat.CIMMsgType
	5,  // 8: coffeechat.CIMMsgInfo.msg_status:type_name -> coffeechat.CIMMsgStatus
	8,  // 9: coffeechat.CIMMsgInfo.sender_client_type:type_name -> coffeechat.CIMClientType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_app_rpc_chat_api_chat_message_proto_init() }
func file_app_rpc_chat_api_chat_message_proto_init() {
	if File_app_rpc_chat_api_chat_message_proto != nil {
		return
	}
	file_app_rpc_chat_api_chat_contants_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_app_rpc_chat_api_chat_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMContactSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_rpc_chat_api_chat_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_rpc_chat_api_chat_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_rpc_chat_api_chat_message_proto_goTypes,
		DependencyIndexes: file_app_rpc_chat_api_chat_message_proto_depIdxs,
		MessageInfos:      file_app_rpc_chat_api_chat_message_proto_msgTypes,
	}.Build()
	File_app_rpc_chat_api_chat_message_proto = out.File
	file_app_rpc_chat_api_chat_message_proto_rawDesc = nil
	file_app_rpc_chat_api_chat_message_proto_goTypes = nil
	file_app_rpc_chat_api_chat_message_proto_depIdxs = nil
}
