// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"CoffeeChat/internal/chat/data/ent/migrate"

	"CoffeeChat/internal/chat/data/ent/messagerecv"
	"CoffeeChat/internal/chat/data/ent/messagesend"
	"CoffeeChat/internal/chat/data/ent/session"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MessageRecv is the client for interacting with the MessageRecv builders.
	MessageRecv *MessageRecvClient
	// MessageSend is the client for interacting with the MessageSend builders.
	MessageSend *MessageSendClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MessageRecv = NewMessageRecvClient(c.config)
	c.MessageSend = NewMessageSendClient(c.config)
	c.Session = NewSessionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		MessageRecv: NewMessageRecvClient(cfg),
		MessageSend: NewMessageSendClient(cfg),
		Session:     NewSessionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		MessageRecv: NewMessageRecvClient(cfg),
		MessageSend: NewMessageSendClient(cfg),
		Session:     NewSessionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MessageRecv.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.MessageRecv.Use(hooks...)
	c.MessageSend.Use(hooks...)
	c.Session.Use(hooks...)
}

// MessageRecvClient is a client for the MessageRecv schema.
type MessageRecvClient struct {
	config
}

// NewMessageRecvClient returns a client for the MessageRecv from the given config.
func NewMessageRecvClient(c config) *MessageRecvClient {
	return &MessageRecvClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagerecv.Hooks(f(g(h())))`.
func (c *MessageRecvClient) Use(hooks ...Hook) {
	c.hooks.MessageRecv = append(c.hooks.MessageRecv, hooks...)
}

// Create returns a builder for creating a MessageRecv entity.
func (c *MessageRecvClient) Create() *MessageRecvCreate {
	mutation := newMessageRecvMutation(c.config, OpCreate)
	return &MessageRecvCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageRecv entities.
func (c *MessageRecvClient) CreateBulk(builders ...*MessageRecvCreate) *MessageRecvCreateBulk {
	return &MessageRecvCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageRecv.
func (c *MessageRecvClient) Update() *MessageRecvUpdate {
	mutation := newMessageRecvMutation(c.config, OpUpdate)
	return &MessageRecvUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageRecvClient) UpdateOne(mr *MessageRecv) *MessageRecvUpdateOne {
	mutation := newMessageRecvMutation(c.config, OpUpdateOne, withMessageRecv(mr))
	return &MessageRecvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageRecvClient) UpdateOneID(id int) *MessageRecvUpdateOne {
	mutation := newMessageRecvMutation(c.config, OpUpdateOne, withMessageRecvID(id))
	return &MessageRecvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageRecv.
func (c *MessageRecvClient) Delete() *MessageRecvDelete {
	mutation := newMessageRecvMutation(c.config, OpDelete)
	return &MessageRecvDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageRecvClient) DeleteOne(mr *MessageRecv) *MessageRecvDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MessageRecvClient) DeleteOneID(id int) *MessageRecvDeleteOne {
	builder := c.Delete().Where(messagerecv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageRecvDeleteOne{builder}
}

// Query returns a query builder for MessageRecv.
func (c *MessageRecvClient) Query() *MessageRecvQuery {
	return &MessageRecvQuery{
		config: c.config,
	}
}

// Get returns a MessageRecv entity by its id.
func (c *MessageRecvClient) Get(ctx context.Context, id int) (*MessageRecv, error) {
	return c.Query().Where(messagerecv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageRecvClient) GetX(ctx context.Context, id int) *MessageRecv {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageRecvClient) Hooks() []Hook {
	return c.hooks.MessageRecv
}

// MessageSendClient is a client for the MessageSend schema.
type MessageSendClient struct {
	config
}

// NewMessageSendClient returns a client for the MessageSend from the given config.
func NewMessageSendClient(c config) *MessageSendClient {
	return &MessageSendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagesend.Hooks(f(g(h())))`.
func (c *MessageSendClient) Use(hooks ...Hook) {
	c.hooks.MessageSend = append(c.hooks.MessageSend, hooks...)
}

// Create returns a builder for creating a MessageSend entity.
func (c *MessageSendClient) Create() *MessageSendCreate {
	mutation := newMessageSendMutation(c.config, OpCreate)
	return &MessageSendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageSend entities.
func (c *MessageSendClient) CreateBulk(builders ...*MessageSendCreate) *MessageSendCreateBulk {
	return &MessageSendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageSend.
func (c *MessageSendClient) Update() *MessageSendUpdate {
	mutation := newMessageSendMutation(c.config, OpUpdate)
	return &MessageSendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageSendClient) UpdateOne(ms *MessageSend) *MessageSendUpdateOne {
	mutation := newMessageSendMutation(c.config, OpUpdateOne, withMessageSend(ms))
	return &MessageSendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageSendClient) UpdateOneID(id int) *MessageSendUpdateOne {
	mutation := newMessageSendMutation(c.config, OpUpdateOne, withMessageSendID(id))
	return &MessageSendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageSend.
func (c *MessageSendClient) Delete() *MessageSendDelete {
	mutation := newMessageSendMutation(c.config, OpDelete)
	return &MessageSendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageSendClient) DeleteOne(ms *MessageSend) *MessageSendDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MessageSendClient) DeleteOneID(id int) *MessageSendDeleteOne {
	builder := c.Delete().Where(messagesend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageSendDeleteOne{builder}
}

// Query returns a query builder for MessageSend.
func (c *MessageSendClient) Query() *MessageSendQuery {
	return &MessageSendQuery{
		config: c.config,
	}
}

// Get returns a MessageSend entity by its id.
func (c *MessageSendClient) Get(ctx context.Context, id int) (*MessageSend, error) {
	return c.Query().Where(messagesend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageSendClient) GetX(ctx context.Context, id int) *MessageSend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageSendClient) Hooks() []Hook {
	return c.hooks.MessageSend
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}
