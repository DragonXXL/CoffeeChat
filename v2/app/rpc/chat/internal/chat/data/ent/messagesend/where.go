// Code generated by ent, DO NOT EDIT.

package messagesend

import (
	"CoffeeChat/internal/chat/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MsgID applies equality check predicate on the "msg_id" field. It's identical to MsgIDEQ.
func MsgID(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgID), v))
	})
}

// ClientMsgID applies equality check predicate on the "client_msg_id" field. It's identical to ClientMsgIDEQ.
func ClientMsgID(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientMsgID), v))
	})
}

// FromID applies equality check predicate on the "from_id" field. It's identical to FromIDEQ.
func FromID(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromID), v))
	})
}

// ToID applies equality check predicate on the "to_id" field. It's identical to ToIDEQ.
func ToID(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToID), v))
	})
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupID), v))
	})
}

// MsgType applies equality check predicate on the "msg_type" field. It's identical to MsgTypeEQ.
func MsgType(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgType), v))
	})
}

// MsgContent applies equality check predicate on the "msg_content" field. It's identical to MsgContentEQ.
func MsgContent(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgContent), v))
	})
}

// MsgResCode applies equality check predicate on the "msg_res_code" field. It's identical to MsgResCodeEQ.
func MsgResCode(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgResCode), v))
	})
}

// MsgFeature applies equality check predicate on the "msg_feature" field. It's identical to MsgFeatureEQ.
func MsgFeature(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgFeature), v))
	})
}

// MsgStatus applies equality check predicate on the "msg_status" field. It's identical to MsgStatusEQ.
func MsgStatus(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgStatus), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// MsgIDEQ applies the EQ predicate on the "msg_id" field.
func MsgIDEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgID), v))
	})
}

// MsgIDNEQ applies the NEQ predicate on the "msg_id" field.
func MsgIDNEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgID), v))
	})
}

// MsgIDIn applies the In predicate on the "msg_id" field.
func MsgIDIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgID), v...))
	})
}

// MsgIDNotIn applies the NotIn predicate on the "msg_id" field.
func MsgIDNotIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgID), v...))
	})
}

// MsgIDGT applies the GT predicate on the "msg_id" field.
func MsgIDGT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgID), v))
	})
}

// MsgIDGTE applies the GTE predicate on the "msg_id" field.
func MsgIDGTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgID), v))
	})
}

// MsgIDLT applies the LT predicate on the "msg_id" field.
func MsgIDLT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgID), v))
	})
}

// MsgIDLTE applies the LTE predicate on the "msg_id" field.
func MsgIDLTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgID), v))
	})
}

// ClientMsgIDEQ applies the EQ predicate on the "client_msg_id" field.
func ClientMsgIDEQ(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDNEQ applies the NEQ predicate on the "client_msg_id" field.
func ClientMsgIDNEQ(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDIn applies the In predicate on the "client_msg_id" field.
func ClientMsgIDIn(vs ...string) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientMsgID), v...))
	})
}

// ClientMsgIDNotIn applies the NotIn predicate on the "client_msg_id" field.
func ClientMsgIDNotIn(vs ...string) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientMsgID), v...))
	})
}

// ClientMsgIDGT applies the GT predicate on the "client_msg_id" field.
func ClientMsgIDGT(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDGTE applies the GTE predicate on the "client_msg_id" field.
func ClientMsgIDGTE(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDLT applies the LT predicate on the "client_msg_id" field.
func ClientMsgIDLT(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDLTE applies the LTE predicate on the "client_msg_id" field.
func ClientMsgIDLTE(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDContains applies the Contains predicate on the "client_msg_id" field.
func ClientMsgIDContains(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDHasPrefix applies the HasPrefix predicate on the "client_msg_id" field.
func ClientMsgIDHasPrefix(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDHasSuffix applies the HasSuffix predicate on the "client_msg_id" field.
func ClientMsgIDHasSuffix(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDEqualFold applies the EqualFold predicate on the "client_msg_id" field.
func ClientMsgIDEqualFold(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientMsgID), v))
	})
}

// ClientMsgIDContainsFold applies the ContainsFold predicate on the "client_msg_id" field.
func ClientMsgIDContainsFold(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientMsgID), v))
	})
}

// FromIDEQ applies the EQ predicate on the "from_id" field.
func FromIDEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromID), v))
	})
}

// FromIDNEQ applies the NEQ predicate on the "from_id" field.
func FromIDNEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromID), v))
	})
}

// FromIDIn applies the In predicate on the "from_id" field.
func FromIDIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromID), v...))
	})
}

// FromIDNotIn applies the NotIn predicate on the "from_id" field.
func FromIDNotIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromID), v...))
	})
}

// FromIDGT applies the GT predicate on the "from_id" field.
func FromIDGT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromID), v))
	})
}

// FromIDGTE applies the GTE predicate on the "from_id" field.
func FromIDGTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromID), v))
	})
}

// FromIDLT applies the LT predicate on the "from_id" field.
func FromIDLT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromID), v))
	})
}

// FromIDLTE applies the LTE predicate on the "from_id" field.
func FromIDLTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromID), v))
	})
}

// ToIDEQ applies the EQ predicate on the "to_id" field.
func ToIDEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToID), v))
	})
}

// ToIDNEQ applies the NEQ predicate on the "to_id" field.
func ToIDNEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToID), v))
	})
}

// ToIDIn applies the In predicate on the "to_id" field.
func ToIDIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToID), v...))
	})
}

// ToIDNotIn applies the NotIn predicate on the "to_id" field.
func ToIDNotIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToID), v...))
	})
}

// ToIDGT applies the GT predicate on the "to_id" field.
func ToIDGT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToID), v))
	})
}

// ToIDGTE applies the GTE predicate on the "to_id" field.
func ToIDGTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToID), v))
	})
}

// ToIDLT applies the LT predicate on the "to_id" field.
func ToIDLT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToID), v))
	})
}

// ToIDLTE applies the LTE predicate on the "to_id" field.
func ToIDLTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToID), v))
	})
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupID), v))
	})
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupID), v))
	})
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupID), v...))
	})
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int64) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupID), v...))
	})
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupID), v))
	})
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupID), v))
	})
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupID), v))
	})
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v int64) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupID), v))
	})
}

// MsgTypeEQ applies the EQ predicate on the "msg_type" field.
func MsgTypeEQ(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgType), v))
	})
}

// MsgTypeNEQ applies the NEQ predicate on the "msg_type" field.
func MsgTypeNEQ(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgType), v))
	})
}

// MsgTypeIn applies the In predicate on the "msg_type" field.
func MsgTypeIn(vs ...int) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgType), v...))
	})
}

// MsgTypeNotIn applies the NotIn predicate on the "msg_type" field.
func MsgTypeNotIn(vs ...int) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgType), v...))
	})
}

// MsgTypeGT applies the GT predicate on the "msg_type" field.
func MsgTypeGT(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgType), v))
	})
}

// MsgTypeGTE applies the GTE predicate on the "msg_type" field.
func MsgTypeGTE(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgType), v))
	})
}

// MsgTypeLT applies the LT predicate on the "msg_type" field.
func MsgTypeLT(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgType), v))
	})
}

// MsgTypeLTE applies the LTE predicate on the "msg_type" field.
func MsgTypeLTE(v int) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgType), v))
	})
}

// MsgContentEQ applies the EQ predicate on the "msg_content" field.
func MsgContentEQ(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgContent), v))
	})
}

// MsgContentNEQ applies the NEQ predicate on the "msg_content" field.
func MsgContentNEQ(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgContent), v))
	})
}

// MsgContentIn applies the In predicate on the "msg_content" field.
func MsgContentIn(vs ...string) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgContent), v...))
	})
}

// MsgContentNotIn applies the NotIn predicate on the "msg_content" field.
func MsgContentNotIn(vs ...string) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgContent), v...))
	})
}

// MsgContentGT applies the GT predicate on the "msg_content" field.
func MsgContentGT(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgContent), v))
	})
}

// MsgContentGTE applies the GTE predicate on the "msg_content" field.
func MsgContentGTE(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgContent), v))
	})
}

// MsgContentLT applies the LT predicate on the "msg_content" field.
func MsgContentLT(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgContent), v))
	})
}

// MsgContentLTE applies the LTE predicate on the "msg_content" field.
func MsgContentLTE(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgContent), v))
	})
}

// MsgContentContains applies the Contains predicate on the "msg_content" field.
func MsgContentContains(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMsgContent), v))
	})
}

// MsgContentHasPrefix applies the HasPrefix predicate on the "msg_content" field.
func MsgContentHasPrefix(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMsgContent), v))
	})
}

// MsgContentHasSuffix applies the HasSuffix predicate on the "msg_content" field.
func MsgContentHasSuffix(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMsgContent), v))
	})
}

// MsgContentEqualFold applies the EqualFold predicate on the "msg_content" field.
func MsgContentEqualFold(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMsgContent), v))
	})
}

// MsgContentContainsFold applies the ContainsFold predicate on the "msg_content" field.
func MsgContentContainsFold(v string) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMsgContent), v))
	})
}

// MsgResCodeEQ applies the EQ predicate on the "msg_res_code" field.
func MsgResCodeEQ(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgResCode), v))
	})
}

// MsgResCodeNEQ applies the NEQ predicate on the "msg_res_code" field.
func MsgResCodeNEQ(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgResCode), v))
	})
}

// MsgResCodeIn applies the In predicate on the "msg_res_code" field.
func MsgResCodeIn(vs ...int16) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgResCode), v...))
	})
}

// MsgResCodeNotIn applies the NotIn predicate on the "msg_res_code" field.
func MsgResCodeNotIn(vs ...int16) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgResCode), v...))
	})
}

// MsgResCodeGT applies the GT predicate on the "msg_res_code" field.
func MsgResCodeGT(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgResCode), v))
	})
}

// MsgResCodeGTE applies the GTE predicate on the "msg_res_code" field.
func MsgResCodeGTE(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgResCode), v))
	})
}

// MsgResCodeLT applies the LT predicate on the "msg_res_code" field.
func MsgResCodeLT(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgResCode), v))
	})
}

// MsgResCodeLTE applies the LTE predicate on the "msg_res_code" field.
func MsgResCodeLTE(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgResCode), v))
	})
}

// MsgFeatureEQ applies the EQ predicate on the "msg_feature" field.
func MsgFeatureEQ(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgFeature), v))
	})
}

// MsgFeatureNEQ applies the NEQ predicate on the "msg_feature" field.
func MsgFeatureNEQ(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgFeature), v))
	})
}

// MsgFeatureIn applies the In predicate on the "msg_feature" field.
func MsgFeatureIn(vs ...int16) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgFeature), v...))
	})
}

// MsgFeatureNotIn applies the NotIn predicate on the "msg_feature" field.
func MsgFeatureNotIn(vs ...int16) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgFeature), v...))
	})
}

// MsgFeatureGT applies the GT predicate on the "msg_feature" field.
func MsgFeatureGT(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgFeature), v))
	})
}

// MsgFeatureGTE applies the GTE predicate on the "msg_feature" field.
func MsgFeatureGTE(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgFeature), v))
	})
}

// MsgFeatureLT applies the LT predicate on the "msg_feature" field.
func MsgFeatureLT(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgFeature), v))
	})
}

// MsgFeatureLTE applies the LTE predicate on the "msg_feature" field.
func MsgFeatureLTE(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgFeature), v))
	})
}

// MsgStatusEQ applies the EQ predicate on the "msg_status" field.
func MsgStatusEQ(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgStatus), v))
	})
}

// MsgStatusNEQ applies the NEQ predicate on the "msg_status" field.
func MsgStatusNEQ(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgStatus), v))
	})
}

// MsgStatusIn applies the In predicate on the "msg_status" field.
func MsgStatusIn(vs ...int16) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgStatus), v...))
	})
}

// MsgStatusNotIn applies the NotIn predicate on the "msg_status" field.
func MsgStatusNotIn(vs ...int16) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgStatus), v...))
	})
}

// MsgStatusGT applies the GT predicate on the "msg_status" field.
func MsgStatusGT(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgStatus), v))
	})
}

// MsgStatusGTE applies the GTE predicate on the "msg_status" field.
func MsgStatusGTE(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgStatus), v))
	})
}

// MsgStatusLT applies the LT predicate on the "msg_status" field.
func MsgStatusLT(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgStatus), v))
	})
}

// MsgStatusLTE applies the LTE predicate on the "msg_status" field.
func MsgStatusLTE(v int16) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MessageSend {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageSend(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageSend) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageSend) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageSend) predicate.MessageSend {
	return predicate.MessageSend(func(s *sql.Selector) {
		p(s.Not())
	})
}
