// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CIM.Server.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CIM_Server_CIMServer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户ID
  var userID: UInt64 = 0

  /// 预留
  var key: String = String()

  /// 来源服务器
  var server: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 内部单聊群聊消息
struct CIM_Server_CIMInternalMsgData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0703
  var server: CIM_Server_CIMServer {
    get {return _storage._server ?? CIM_Server_CIMServer()}
    set {_uniqueStorage()._server = newValue}
  }
  /// Returns true if `server` has been explicitly set.
  var hasServer: Bool {return _storage._server != nil}
  /// Clears the value of `server`. Subsequent reads from it will return its default value.
  mutating func clearServer() {_uniqueStorage()._server = nil}

  /// 消息
  var msgData: CIM_Message_CIMMsgData {
    get {return _storage._msgData ?? CIM_Message_CIMMsgData()}
    set {_uniqueStorage()._msgData = newValue}
  }
  /// Returns true if `msgData` has been explicitly set.
  var hasMsgData: Bool {return _storage._msgData != nil}
  /// Clears the value of `msgData`. Subsequent reads from it will return its default value.
  mutating func clearMsgData() {_uniqueStorage()._msgData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 内部会话已读
struct CIM_Server_CIMInternalMsgDataReadAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0704
  var server: CIM_Server_CIMServer {
    get {return _storage._server ?? CIM_Server_CIMServer()}
    set {_uniqueStorage()._server = newValue}
  }
  /// Returns true if `server` has been explicitly set.
  var hasServer: Bool {return _storage._server != nil}
  /// Clears the value of `server`. Subsequent reads from it will return its default value.
  mutating func clearServer() {_uniqueStorage()._server = nil}

  /// 消息已读ACK
  var readAck: CIM_Message_CIMMsgDataReadAck {
    get {return _storage._readAck ?? CIM_Message_CIMMsgDataReadAck()}
    set {_uniqueStorage()._readAck = newValue}
  }
  /// Returns true if `readAck` has been explicitly set.
  var hasReadAck: Bool {return _storage._readAck != nil}
  /// Clears the value of `readAck`. Subsequent reads from it will return its default value.
  mutating func clearReadAck() {_uniqueStorage()._readAck = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 内部会话已读通知
struct CIM_Server_CIMInternalMsgDataReadNotify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0704
  var server: CIM_Server_CIMServer {
    get {return _storage._server ?? CIM_Server_CIMServer()}
    set {_uniqueStorage()._server = newValue}
  }
  /// Returns true if `server` has been explicitly set.
  var hasServer: Bool {return _storage._server != nil}
  /// Clears the value of `server`. Subsequent reads from it will return its default value.
  mutating func clearServer() {_uniqueStorage()._server = nil}

  /// 消息已读通知
  var readNotify: CIM_Message_CIMMsgDataReadNotify {
    get {return _storage._readNotify ?? CIM_Message_CIMMsgDataReadNotify()}
    set {_uniqueStorage()._readNotify = newValue}
  }
  /// Returns true if `readNotify` has been explicitly set.
  var hasReadNotify: Bool {return _storage._readNotify != nil}
  /// Clears the value of `readNotify`. Subsequent reads from it will return its default value.
  mutating func clearReadNotify() {_uniqueStorage()._readNotify = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CIM.Server"

extension CIM_Server_CIMServer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMServer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "key"),
    3: .same(proto: "server"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.key)
      case 3: try decoder.decodeSingularStringField(value: &self.server)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.server.isEmpty {
      try visitor.visitSingularStringField(value: self.server, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Server_CIMServer, rhs: CIM_Server_CIMServer) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.key != rhs.key {return false}
    if lhs.server != rhs.server {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Server_CIMInternalMsgData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMInternalMsgData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "server"),
    2: .standard(proto: "msg_data"),
  ]

  fileprivate class _StorageClass {
    var _server: CIM_Server_CIMServer? = nil
    var _msgData: CIM_Message_CIMMsgData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _server = source._server
      _msgData = source._msgData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._server)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._msgData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._server {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._msgData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Server_CIMInternalMsgData, rhs: CIM_Server_CIMInternalMsgData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._server != rhs_storage._server {return false}
        if _storage._msgData != rhs_storage._msgData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Server_CIMInternalMsgDataReadAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMInternalMsgDataReadAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "server"),
    2: .standard(proto: "read_ack"),
  ]

  fileprivate class _StorageClass {
    var _server: CIM_Server_CIMServer? = nil
    var _readAck: CIM_Message_CIMMsgDataReadAck? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _server = source._server
      _readAck = source._readAck
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._server)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._readAck)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._server {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._readAck {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Server_CIMInternalMsgDataReadAck, rhs: CIM_Server_CIMInternalMsgDataReadAck) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._server != rhs_storage._server {return false}
        if _storage._readAck != rhs_storage._readAck {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Server_CIMInternalMsgDataReadNotify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMInternalMsgDataReadNotify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "server"),
    3: .standard(proto: "read_notify"),
  ]

  fileprivate class _StorageClass {
    var _server: CIM_Server_CIMServer? = nil
    var _readNotify: CIM_Message_CIMMsgDataReadNotify? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _server = source._server
      _readNotify = source._readNotify
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._server)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._readNotify)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._server {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._readNotify {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Server_CIMInternalMsgDataReadNotify, rhs: CIM_Server_CIMInternalMsgDataReadNotify) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._server != rhs_storage._server {return false}
        if _storage._readNotify != rhs_storage._readNotify {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
