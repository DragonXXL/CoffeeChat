// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CIM.Login.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 认证请求
struct CIM_Login_CIMAuthTokenReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0101
  var userID: UInt64 = 0

  /// CoffeeChat不存储用户信息，消息推送时需要显示昵称
  /// 基于流量考虑，昵称不放在每条消息中携带
  /// 但是如果期间用户更新昵称后，消息推送显示昵称会有延迟，CoffeeChat认为是能接受的
  var nickName: String = String()

  var userToken: String = String()

  var clientType: CIM_Def_CIMClientType = .kCimClientTypeDefault

  ///optional
  var clientVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CIM_Login_CIMAuthTokenRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0102
  var serverTime: UInt32 {
    get {return _storage._serverTime}
    set {_uniqueStorage()._serverTime = newValue}
  }

  /// 验证结果
  var resultCode: CIM_Def_CIMErrorCode {
    get {return _storage._resultCode}
    set {_uniqueStorage()._resultCode = newValue}
  }

  ///optional
  var resultString: String {
    get {return _storage._resultString}
    set {_uniqueStorage()._resultString = newValue}
  }

  ///optional
  var userInfo: CIM_Def_CIMUserInfo {
    get {return _storage._userInfo ?? CIM_Def_CIMUserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 登出
struct CIM_Login_CIMLogoutReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0103
  var userID: UInt64 = 0

  var clientType: CIM_Def_CIMClientType = .kCimClientTypeDefault

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CIM_Login_CIMLogoutRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0104
  var resultCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 心跳
struct CIM_Login_CIMHeartBeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CIM.Login"

extension CIM_Login_CIMAuthTokenReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMAuthTokenReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "nick_name"),
    3: .standard(proto: "user_token"),
    4: .standard(proto: "client_type"),
    5: .standard(proto: "client_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.nickName)
      case 3: try decoder.decodeSingularStringField(value: &self.userToken)
      case 4: try decoder.decodeSingularEnumField(value: &self.clientType)
      case 5: try decoder.decodeSingularStringField(value: &self.clientVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 2)
    }
    if !self.userToken.isEmpty {
      try visitor.visitSingularStringField(value: self.userToken, fieldNumber: 3)
    }
    if self.clientType != .kCimClientTypeDefault {
      try visitor.visitSingularEnumField(value: self.clientType, fieldNumber: 4)
    }
    if !self.clientVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.clientVersion, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Login_CIMAuthTokenReq, rhs: CIM_Login_CIMAuthTokenReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.nickName != rhs.nickName {return false}
    if lhs.userToken != rhs.userToken {return false}
    if lhs.clientType != rhs.clientType {return false}
    if lhs.clientVersion != rhs.clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Login_CIMAuthTokenRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMAuthTokenRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_time"),
    2: .standard(proto: "result_code"),
    3: .standard(proto: "result_string"),
    4: .standard(proto: "user_info"),
  ]

  fileprivate class _StorageClass {
    var _serverTime: UInt32 = 0
    var _resultCode: CIM_Def_CIMErrorCode = .kCimErrUnknown
    var _resultString: String = String()
    var _userInfo: CIM_Def_CIMUserInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serverTime = source._serverTime
      _resultCode = source._resultCode
      _resultString = source._resultString
      _userInfo = source._userInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._serverTime)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._resultCode)
        case 3: try decoder.decodeSingularStringField(value: &_storage._resultString)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._serverTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._serverTime, fieldNumber: 1)
      }
      if _storage._resultCode != .kCimErrUnknown {
        try visitor.visitSingularEnumField(value: _storage._resultCode, fieldNumber: 2)
      }
      if !_storage._resultString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resultString, fieldNumber: 3)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Login_CIMAuthTokenRsp, rhs: CIM_Login_CIMAuthTokenRsp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serverTime != rhs_storage._serverTime {return false}
        if _storage._resultCode != rhs_storage._resultCode {return false}
        if _storage._resultString != rhs_storage._resultString {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Login_CIMLogoutReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMLogoutReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "client_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.clientType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.clientType != .kCimClientTypeDefault {
      try visitor.visitSingularEnumField(value: self.clientType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Login_CIMLogoutReq, rhs: CIM_Login_CIMLogoutReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.clientType != rhs.clientType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Login_CIMLogoutRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMLogoutRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "result_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Login_CIMLogoutRsp, rhs: CIM_Login_CIMLogoutRsp) -> Bool {
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Login_CIMHeartBeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMHeartBeat"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Login_CIMHeartBeat, rhs: CIM_Login_CIMHeartBeat) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
